<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>라곰(Lagom)</title>
    <description>백수개발자의 지식 저장소.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 10 Mar 2023 17:55:21 +0900</pubDate>
    <lastBuildDate>Fri, 10 Mar 2023 17:55:21 +0900</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>[Data Structure] Array VS ArrayList VS LinkedList</title>
        <description>&lt;h2 id=&quot;array-arraylist-linkedlist&quot;&gt;Array, ArrayList, LinkedList&lt;/h2&gt;
&lt;p&gt;이전에서 Array(배열)과 List(리스트)의 차이점에 대해 알아보았다. Python에서는 List(리스트)를 통상 Array(배열)로 생각하여 사용하지만, 엄연히 List(리스트)와 Array(배열)은 다르다는 것을 다시 상기시키자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;array-vs-arraylist-vs-linkedlist&quot;&gt;Array VS ArrayList VS LinkedList&lt;/h2&gt;
&lt;p&gt;일단 결론적으로 차이점만 설명하자면 아래와 같다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Array : index를 통해 빠르게 값을 찾는 것이 가능하다.&lt;/li&gt;
  &lt;li&gt;ArrayList : 데이터를 찾는데 빠르지만 삽입 및 삭제가 느리다.&lt;/li&gt;
  &lt;li&gt;LinkedList : 데이터의 삽입 삭제가 빠르다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그러면 왜 위와 같은 차이점이 생기는지 자세하게 알아보도록 하자. 일단 이전에 학습했던 Array(배열)과 List(리스트)의 차이점은 값이 저장되는 저장소의 주소가 순차적으로 있는지, 아니면 다음 저장소의 주소가 값과 동일하게 저장되어 있어 연속성을 가지고 있는지에 따라 탐색과 삽입,삭제에 효율성이 달랐다.&lt;/p&gt;

&lt;p&gt;기억이 나지 않는다면 다시 한 번 복습하고 이 글을 읽어보자.&lt;br /&gt;
&lt;a href=&quot;http://127.0.0.1:4000/study/2023/03/07/%EB%B0%B0%EC%97%B4(Array).html&quot;&gt;배열(Array)과 리스트(List)의 차이점&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;array배열&quot;&gt;Array(배열)&lt;/h3&gt;
&lt;p&gt;같은 데이터 유형 변수를 여러 개 선언해야 하는 불편함을 줄이기 위해 사용한다. 배열은 선언할 때 크기와 데이터 타입을 지정해야한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;배열은 메모리 공간에 할당할 &lt;code class=&quot;highlighter-rouge&quot;&gt;사이즈를 미리 정해놓고&lt;/code&gt; 사용하는 자료구조이다.&lt;/li&gt;
  &lt;li&gt;크기가 고정되어 있기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;어떤 값이 삭제되면 삭제된 상태를 빈 공간으로 남겨둔다.&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;계속해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;데이터가 늘어날 때의 최대 사이즈를 알 수 없을 때는 사용하기에 부적합&lt;/code&gt;하다.&lt;/li&gt;
  &lt;li&gt;중간에 데이터를 삽입, 삭제할 때도 매우 비효율적이다.&lt;br /&gt;
  ex) 만약 4번째 index값에 새로운 값을 넣어야 한다면 원래 값들을 뒤로 밀어내고 해당 index에 덮어씌워야 한다.&lt;/li&gt;
  &lt;li&gt;단, 배열을 사용하면 index가 존재하기 때문에 위치를 바로 알 수 있어 검색에 효율적이며 빠르다는 장점이 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;arraylist&quot;&gt;ArrayList&lt;/h3&gt;
&lt;p&gt;Array 선언 시 index가 가득차면 값을 넣지 못하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;index가 남아 메모리가 낭비되는 현상이 일어난다.&lt;/code&gt; 이러한 문제를 해결하기 위해 나온 것이 &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList&lt;/code&gt;이다.&lt;/p&gt;

&lt;p&gt;List는 array처럼 크기를 정해주지 않아도 된다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;array가 index가 중요했다면, List에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;순서&lt;/code&gt;가 중요하다.&lt;/li&gt;
  &lt;li&gt;크기가 정해져있지 않기 때문에, &lt;code class=&quot;highlighter-rouge&quot;&gt;중간에 데이터를 추가하거나 삭제하더라도 array가 가지고 있던 문제점을 해결할 수 있다.&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;index를 가지고 있으므로 검색도 빠르다.&lt;/li&gt;
  &lt;li&gt;하지만 중간에 데이터를 추가 및 삭제할 때는 시간이 오래걸리는 단점이 존재한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;추가 및 삭제 시 List가 당겨지거나 밀려날 때 진행되는 연산이 추가되고 메모리도 낭비&lt;/code&gt;된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; : 데이터의 크기가 정해져 있고, 추가적인 삽입 삭제가 일어나지 않으면 검색을 할때 좋다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayList&lt;/code&gt; : 데이터의 크기가 정해져 있지 않고, 삽입 삭제가 많이 일어나며, 검색이 적은 경우 좋다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;linkedlist&quot;&gt;LinkedList&lt;/h3&gt;
&lt;p&gt;LinkedList(연결리스트)는 단일, 다중 등 여러가지가 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;단일&lt;/code&gt;은 뒤의 노드만 가르키고&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;다중&lt;/code&gt;은 앞 뒤 노드를 모두 가리키는 차이가 존재한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;한 노드에 연결될 노드의 포인터 위치를 가리키는 방식으로 되어있다.&lt;br /&gt;
이런 방식을 활용하여, 데이터의 추가 및 삭제 시 전체를 도는 것이 아닌 이전 값과 다음 값이 가르켰던 주소 값만 수정하여 연결시켜주면 되기 때문에 위치에 상관없이 빠르게 진행할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Array와 ArrayList는 index를 가지고 있기 때문에 검색이 빠르지만, LinkedList는 처음부터 순차적으로 검색하므로, 검색 기능에서는 시간이 더 걸린다는 단점이 존재한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;결론&lt;/h2&gt;
&lt;p&gt;따라서 상황에 맞게 알맞은 자료 구조를 선택하여 사용하는 것이 중요한다.&lt;/p&gt;

</description>
        <pubDate>Fri, 10 Mar 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/study/2023/03/10/Array-VS-ArrayList-VSLinkedList.html</link>
        <guid isPermaLink="true">http://localhost:4000/study/2023/03/10/Array-VS-ArrayList-VSLinkedList.html</guid>
        
        <category>data_structure</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>[Data Structure] 배열(Array)과 리스트(List)의 차이점</title>
        <description>&lt;h1 id=&quot;array배열&quot;&gt;Array(배열)&lt;/h1&gt;
&lt;h2 id=&quot;array-배열은-python에서-사용하는-list가-아니다&quot;&gt;Array 배열은 Python에서 사용하는 List가 아니다!!&lt;/h2&gt;
&lt;p&gt;Java에서는 Array, ArrayLis와 Linked List가 존재한다. 기본적으로 알고 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt;는 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;동일한 자료형의 데이터들을 하나의 변수로 정의한 것이다.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;Python에서 사용하는 배열인 List는 Java에서 사용하는 Array와 동일한 개념이 아니다.&lt;/code&gt; Python을 처음 학습할 때 Java에서 사용했던 Array가 List와 동일한 것이라고 생각했다. 하지만 List는 Array와 다르게 동일한 자료형 뿐만 아니라 다른 자료형도 같은 배열 안에서 사용할 수 있다는 점이다.&lt;/p&gt;

&lt;p&gt;그렇지만 언어를 깊게 배우지 않은 초보 개발자는 배열이 List인거 아닌가? 라고 할것이다. 나도 그렇게 생각했듯이…&lt;/p&gt;

&lt;p&gt;이렇게 Java에서 Array와 Python의 List가 다르다는걸 알았으니 어떻게 다른지 깊게 파고들어 보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;배열array-vs-리스트list&quot;&gt;배열(Array) vs 리스트(List)&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;h3 id=&quot;배열array--같은-자료형의-데이터들을-하나의-변수로-정의&quot;&gt;배열(Array) : 같은 자료형의 데이터들을 하나의 변수로 정의&lt;/h3&gt;
  &lt;p&gt;&lt;img src=&quot;/assets/resources/array-001.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;리스트list--서로-다른-자료형의-데이터들도-하나의-변수로-정의&quot;&gt;리스트(List) : 서로 다른 자료형의 데이터들도 하나의 변수로 정의&lt;/h3&gt;
  &lt;p&gt;&lt;img src=&quot;/assets/resources/list-001.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;위에서 설명 했듯이 &lt;code class=&quot;highlighter-rouge&quot;&gt;배열 != 리스트&lt;/code&gt;이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;메모리-사용-방법&quot;&gt;메모리 사용 방법&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/array_vs_list.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;배열과 리스트 모두 메모리라는 저장 공간에 저장이 되고 있다. 저장 공간에는 주소가 존재하는데 주소에 따라 해당하는 데이터를 저장할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;메모리-주소의-차이점&quot;&gt;메모리 주소의 차이점&lt;/h3&gt;
&lt;p&gt;여기서 배열과 리스트의 차이점이 보이는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;배열&lt;/code&gt;은 저장 공간의 주소가 &lt;code class=&quot;highlighter-rouge&quot;&gt;순차적&lt;/code&gt;으로 주어진 것을 볼 수 있고, &lt;code class=&quot;highlighter-rouge&quot;&gt;리스트&lt;/code&gt; 순차적이지 않게 &lt;code class=&quot;highlighter-rouge&quot;&gt;마음대로 주어진 것&lt;/code&gt;을 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;데이터-찾기&quot;&gt;데이터 찾기&lt;/h3&gt;
&lt;p&gt;위의 그림에서 각각 &lt;code class=&quot;highlighter-rouge&quot;&gt;array[0]&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;list[0]&lt;/code&gt; 부를 때는 동일하게 0x05라는 주소를 찾아 데이터를 찾아올 것이다.&lt;/p&gt;

&lt;p&gt;그렇다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;array[3]&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;list[3]&lt;/code&gt;과 같이 첫 번째 위치가 아닌 저장 공간의 값을 불러올 때는 어떻게 찾아올까?&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;배열&lt;/code&gt;의 경우 주소가 순차적으로 되어 있기 때문에 첫 저장 공간 주소인 0x05에서 3번째 주소를 가진 공간의 데이터를 불러오면 된다.&lt;/p&gt;

&lt;p&gt;하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;리스트&lt;/code&gt;는 주소가 순차적으로 되어 있지 않기 때문에 바로 &lt;code class=&quot;highlighter-rouge&quot;&gt;list[3]&lt;/code&gt;으로 접근할 수가 없다. 위의 그림에서 빨간색으로 적힌 다른 주소 값이 같이 저장이 되는데 저 다른 주소 값은 다음의 주소를 가르키는 것이다. 그래서 &lt;code class=&quot;highlighter-rouge&quot;&gt;list[3]&lt;/code&gt;에 접근하고 싶으면 처음 부터 순차적으로 다음, 다음, 다음 주소를 찾아 &lt;code class=&quot;highlighter-rouge&quot;&gt;list[3]&lt;/code&gt;까지 도달해야 하는 것이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ex&amp;gt; 0x05 -&amp;gt; 0x02 -&amp;gt; 0x08 -&amp;gt; 0x01
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 배열과 리스트의 차이점이 있으며 이 부분은 &lt;code class=&quot;highlighter-rouge&quot;&gt;탐색&lt;/code&gt;에 있어 리스트의 단점으로 부각된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;데이터-삭제&quot;&gt;데이터 삭제&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/array_vs_list(delete_before).png&quot; alt=&quot;Alt text&quot; /&gt;
위의 그림과는 다르게 리스트의 연결을 좀 더 시각적으로 표현이 되게 바꿔보았다. 여기서 배열과 리스트의 데이터를 삭제했을 때 어떤식으로 변경이 되는지 확인해 보자.&lt;/p&gt;

&lt;p&gt;array[1], list[1]를 삭제하면 아래 그림과 같이 될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/array_vs_list(delete_after).png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;배열&lt;/code&gt;의 경우 index 1번이 삭제 되었을 때, 데이터가 삭제된 주소 공간이 그대로 남아있으며, &lt;code class=&quot;highlighter-rouge&quot;&gt;리스트&lt;/code&gt;의 경우 index 1번이 삭제 되었을 때, 데이터와 주소 공간이 같이 삭제 되며 그와 같이 연결 되었던 또 다른 주소값이 index 0번과 index 2번이 연결된 모습을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;이 처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;배열&lt;/code&gt;의 경우는 메모리가 낭비되고 있다. 반면에 &lt;code class=&quot;highlighter-rouge&quot;&gt;리스트&lt;/code&gt;의 경우는 다음 주소를 가르키는 포인터만 변경되었다. 배열과 비교했을 때 메모리를 좀 더 효율적으로 사용하는 모습을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;또한 &lt;code class=&quot;highlighter-rouge&quot;&gt;배열&lt;/code&gt;은 중간의 메모리 공간이 비어있기 때문에 뒤의 index들을 모두 앞으로 한 칸씩 변경해줘야하기 때문에 그 만큼 리스트보다 시간이 걸린다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;데이터-추가&quot;&gt;데이터 추가&lt;/h3&gt;
&lt;p&gt;이번엔 데이터가 추가되었을 경우 주소와 저장공간이 어떻게 변경되는지 살펴 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/array_vs_list(add).png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 10이라는 데이터를 추가하였을 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;배열&lt;/code&gt;은 저장 공간의 주소 &lt;code class=&quot;highlighter-rouge&quot;&gt;0x09&lt;/code&gt;가 추가 되었지만 그 주소에 10 데이터가 들어가지 않고, 10은 index 0이 가지는 주소에 들어가고 그 뒤의 데이터들이 하나씩 밀리는 모습을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;리스트&lt;/code&gt;는 저장 공간의 주소 &lt;code class=&quot;highlighter-rouge&quot;&gt;0x09&lt;/code&gt;가 추가 되었고 추가된 주소에 데이터 10이 들어가 있는 모습을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;이 처럼 데이터 추가에서도 데이터 삭제와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;배열&lt;/code&gt;보다 &lt;code class=&quot;highlighter-rouge&quot;&gt;리스트&lt;/code&gt;가 메모리 공간을 효율적으로 사용할 수 있는 모습을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;결과&quot;&gt;결과&lt;/h2&gt;
&lt;p&gt;이렇게 배열과 Python에서 사용하는 List는 다르지만 통상적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;배열&lt;/code&gt;이라 부르며 사용하고 있다. 그렇다면 Python에서는 Array를 사용할 수 없는 것일까? 그것은 좀더 Python언어를 학습하며 발견하면 다시 한 번 정리해 보겠다.&lt;/p&gt;

&lt;h3 id=&quot;추가-지식&quot;&gt;추가 지식&lt;/h3&gt;
&lt;p&gt;Python에서는 데이터가 반복해서 나타나는 객체들을 &lt;code class=&quot;highlighter-rouge&quot;&gt;이터러블(Iterable)&lt;/code&gt;이라고 정의하는데&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;List, Tuple, Set, Dictionary, String 등
을 모두 이터러블 객체라고 부른다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=q41J1npj86M&quot;&gt;우리밋 - 배열과 리스트의 차이&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Mar 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/study/2023/03/07/%EB%B0%B0%EC%97%B4(Array).html</link>
        <guid isPermaLink="true">http://localhost:4000/study/2023/03/07/%EB%B0%B0%EC%97%B4(Array).html</guid>
        
        <category>data_structure</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>[Algorithm] 병합 정렬 (Merge Sort)</title>
        <description>&lt;h1 id=&quot;병합-정렬merge-sort&quot;&gt;병합 정렬(Merge Sort)&lt;/h1&gt;
&lt;p&gt;합병 정렬이라고도 부르며, &lt;a href=&quot;https://laagom.github.io/study/2023/03/05/%ED%80%B5-%EC%A0%95%EB%A0%AC(Quick-Sort).html&quot;&gt;퀵 정렬(Quick Sort)&lt;/a&gt;과 동일하게 분할 정복 방법을 통해 구현한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;개념&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;개념&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;퀵 정렬과 마찬가지로 빠른 정렬로 분류되며 많이 사용되고 언급되는 정렬 방식이다. 퀵 정렬과는 반대로 &lt;code class=&quot;highlighter-rouge&quot;&gt;안정 정렬&lt;/code&gt;에 속한다. 병합 정렬은 &lt;code class=&quot;highlighter-rouge&quot;&gt;분할 정복(Divide and Conquer) 기법&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;재귀 알고리즘&lt;/code&gt;을 이용해서 정렬하는 알고리즘이다.&lt;/p&gt;

&lt;p&gt;주어진 배열을 원소가 하나 밖에 남지 않을 때까지 쪼갠 후 다시 크기 순으로 재배열 하면서 원래 크기의 배열로 합친다.&lt;/p&gt;

&lt;p&gt;이제 하나의 배열을 가지고 위에서 설명한 &lt;code class=&quot;highlighter-rouge&quot;&gt;병합 정렬&lt;/code&gt;이 어떻게 진행되는지 알아보자.&lt;/p&gt;

&lt;p&gt;예를 들어, 다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;부터 &lt;code class=&quot;highlighter-rouge&quot;&gt;8&lt;/code&gt;까지 총8개의 숫자가 들어있는 배열에 있다고 가정해보자.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[6, 5, 3, 1, 8, 7, 2, 4]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 배열을 반토막 내며 반복해서 쪼개주자.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[6, 5, 3, 1] [8, 7, 2, 4]

[6, 5] [3, 1] [8, 7] [2, 4]

[6] [5] [3] [1] [8] [7] [2] [4]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 반토막 내며 쪼개면 결과적으로 배열이 가진 원소 수 만큼 배열이 나눠진다. 이렇게 더 이상 쪼갤 수 없을때가 되면 두 개씩 병합을 시작할 것이다. 합칠 때는 작은 숫자가 앞에, 큰 숫자가 뒤에 위치시킨다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[5, 6] [1, 3] [7, 8] [2, 4] 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이제 4개의 배열을 2개로 합친다. 각 배열 내에서 가장 작은 값 2개를 비교해서 더 작은 값을 먼저 선택하면 자연스럽게 크기 순으로 선택이 된다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[1, 3, 5, 6] [2, 4, 7, 8]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;최종적으로 2개의 배열도 마찬가지로 크기 순으로 선택해가면서 하나로 합치면 정렬된 배열을 얻을 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[1, 2, 3, 4, 5, 6, 7, 8]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;gif로-이해하는-merge-sort&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;GIF로 이해하는 Merge Sort&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/merge-sort-001.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;특징&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;특징&lt;/span&gt;&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;알고리즘을 큰 그림에서 보면 분할(split) 단계와 병합(merge) 단계로 나눌 수 있으며, 단순히 중간 인덱스를 찾아야하는 분할 비용보다 모든 값들을 비교해야하는 병합 비용이 더 크다.&lt;/li&gt;
  &lt;li&gt;예제에서 보이는 것과 같이 8-&amp;gt;4-&amp;gt;2-&amp;gt;1 식으로 전반적인 반복의 수는 점점 절반으로 줄어들기 때문에 O(logN)시간이 필요하며, 각 패스에서 병합할 때 모든 값들을 비교해야 하므로 O(N) 시간이 소모된다. 따라서 총 시간 복잡도는 O(NlogN)이다.&lt;/li&gt;
  &lt;li&gt;두 개의 배열을 병합 할 때 병합 결과를 담아 놓을 배열이 추가로 필요하다. 따라서 공간 복잡도는 O(N)이다.&lt;/li&gt;
  &lt;li&gt;다른 정렬 알고리즘과 달리 인접한 값들 간에 상호 자리 교대가 일어나지 않는다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;python-코드&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;Python 코드&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;재귀를 이용해서 병합 정렬을 구현할 수 있다. 먼저 배열을 더 이상 나눌 수 없을 때 까지(원소가 하나만 남을 때까지) 최대한 분할 후에, 다시 병합하면서 점점 큰 배열을 만들어 나가면 된다. 따라서 이 재귀 알고리즘의 기본 사례는 입력 배열의 크기가 2보다 작을 때이며 이 존건에 해당할 때는 배열을 그대로 반환하면 된다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;merge_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arry&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;low_arry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;high_arry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merge_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;merged_arry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low_arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high_arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low_arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high_arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;merged_arry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low_arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;merged_arry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high_arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;merged_arry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low_arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;merged_arry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high_arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;merged_arry&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;merge_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 Python의 리스트 slice notation(arr[start:end])을 사용하면 다음과 같이 간결한 코드를 작성할 수 있다. 하지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;리스트 slice를 할 때 배열의 복제가 일어나므로 메모리 사용 효율은 좋지 않다.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;최적화&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;최적화&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;병합 결과를 담을 새로운 배열을 매번 생성해서 리턴하지 않고, 인덱스 접근을 이용해 입력 배열을 계속해서 업데이트하면 메모리 사용량을 대폭 줄일 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;merge_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;merge_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 07 Mar 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/study/2023/03/07/%EB%B3%91%ED%95%A9-%EC%A0%95%EB%A0%AC(Merge-Sort).html</link>
        <guid isPermaLink="true">http://localhost:4000/study/2023/03/07/%EB%B3%91%ED%95%A9-%EC%A0%95%EB%A0%AC(Merge-Sort).html</guid>
        
        <category>algorithm</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>[Algorithm] 퀵 정렬 (Quick Sort)</title>
        <description>&lt;h1 id=&quot;퀵-정렬quick-sort&quot;&gt;퀵 정렬(Quick Sort)&lt;/h1&gt;
&lt;p&gt;이번에는 정렬 알고리즘에서 가장 유명한 알고리즘인 퀵 정렬(Quick Sort)에 대해 알아보려고 한다.&lt;/p&gt;

&lt;h3 id=&quot;개념&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;개념&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;병합 정렬과 마찬가지로 퀵정렬도 &lt;a href=&quot;https://velog.io/@arittung/Divide-and-Conquer&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;분할 정복기법&lt;/code&gt;&lt;/a&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;재귀 알고리즘&lt;/code&gt;을 이용한 정렬 알고리즘이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*[분할 정복(divide and conquer) 방법]
문제를 작은 2개의 문제로 분리하고 각각 해결한 후, 결과를 모아서 원래의 문제를 해결하는 전략이다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;퀵 정렬(Quick Sort)은 &lt;code class=&quot;highlighter-rouge&quot;&gt;불안정 정렬&lt;/code&gt;에 속하며, 다른 원소와의 비교만으로 정렬을 수행하는 비교 정렬에 속한다. 또한 병합 정렬과 달리 퀵 정렬(Quick Sort)는 배열을 비균등하게 분할한다.&lt;/p&gt;

&lt;p&gt;위의 설명만으로 보면 무슨 기법이니 재귀 알고리즘이니 사용하는 것들이 많아 어려워 보이지만 예제를 들어 코드를 살펴보면 어려울 것 없는 알고리즘이다.&lt;/p&gt;

&lt;p&gt;이제 하나의 배열을 가지고 위에서 설명한 &lt;code class=&quot;highlighter-rouge&quot;&gt;퀵 정렬&lt;/code&gt;이 어떻게 진행되는지 알아보자.&lt;/p&gt;

&lt;p&gt;아래와 같이 1~7까지 총 7개의 숫자가 들어있는 배열이 존재한다.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[6, 5, 1, 4, 7, 2, 3]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;항상 정 가운데를 기준으로 분할을 하는 병합 정렬과 달리, 퀵 정렬은 흔히 &lt;code class=&quot;highlighter-rouge&quot;&gt;피벗(pivot)&lt;/code&gt;이라고 불리는 임의의 기준 값을 사용한다. 여기서 말하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;피벗(pivot)&lt;/code&gt;하나의 기준점이라고 생각하면 된다. &lt;code class=&quot;highlighter-rouge&quot;&gt;피벗&lt;/code&gt;값을 선택하는데는 여러가지 방법이 있지만 여기서는 간단한 설명을 위해 정 중앙에 위치한 &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt;를 피벗으로 정하겠다. 그리고 다음과 같이 이 피벗값을 기준으로 피벗보다 작은 값의 그룹과 피벗보다 큰 값의 그룹으로 분리를 해준다.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[3, 2, 1] &amp;lt; 4(pivot) &amp;lt; [7, 5, 6]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 피벗보다 작은 값들은 모두 왼편으로, 큰 값들은 모두 오른편으로 나누면 기준 값은 정확히 정렬된 위치에 놓이게 된다. 또한 이러한 방식으로 분할을 해 놓으면 앞으로 더 이상 왼편에 있는 값들과 오른편에 있는 값들 간에는 비교를 할 필요가 없다. 따라서 반대편은 전혀 신경쓰지 않고 왼편이든 오른편이든 같은편 내의 값들 끼리 비교 후 정렬을 할 수 있다.&lt;/p&gt;

&lt;p&gt;먼저 왼편을 동일한 방식으로 정렬해보자. 왼편의 정 가운데 값인 2가 피벗이며 작은 값 1은 왼편, 큰 값인 3은 오른쪽에 위치시킨다. 이제 양쪽 모두 값이 하나씩 밖에 없기 때문에 왼편의 정렬 작업이 완료되었다.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[1] &amp;lt; 2(pivot) &amp;lt; [3]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;오른편도 동일한 방식으로 정렬해보자. 오른편의 피벗 값은 5, 작은 값들은 왼편, 큰값들은 오른편&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[] &amp;lt; 5(pivot) &amp;lt; [7, 6]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;오른편의 오른쪽에는 값이 2개가 있기 때문에 추가 정렬이 필요하며, 왼편에는 값이 없지만 오른편에는 여전히 두 개의 값이 있기 때문에, 동일한 방식의 정렬을 적용해 보겠다.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[6] &amp;lt; 7(pivot) &amp;lt; []
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;마지막으로 지금까지 좌우로 분할했던 값들을 모두 합치면 다음과 같이 정렬된 배열을 얻을 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[1, 2, 3, 4, 5, 6, 7]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;지금까지 살펴본 것과 같이 퀵 정렬은 배열을 피벗 값 기준으로 더 작은 값과 큰 값으로 반복적으로 분할하여 정렬해 나가는 방식을 취하고 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;gif로-이해하는-quick-sort&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;GIF로 이해하는 Quick Sort&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/quick-sort-001.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;특징&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;특징&lt;/span&gt;&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;파이썬(Python)의 list.sort()함수나 자바(Java)의 Arrays.sort()처럼 프로그래밍 언어 차원에서 기본적으로 지원되는 내장 정렬 함수는 대부분 퀵 정렬을 기본으로 한다.&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;일반적으로 원소의 개수가 적어질수록 나쁜 중간값이 선택될 확률이 높아지기 때문에, 원소의 개수에 따라 퀵 정렬에 다른 정렬을 혼합해서 쓰는 경우가 많다.&lt;/li&gt;
  &lt;li&gt;병합 정렬과 퀵 정렬은 분할 정복과 재귀 알고리즘을 사용한다는 측면에서는 유사해보이지만, 내부적으로 정렬하는 방식에는 큰 차이가 있다.&lt;/li&gt;
  &lt;li&gt;병합 정렬은 항상 정 중앙 기중으로 단순 분할 후 병합 시점에서 값의 비교 연산이 발생하는 반면, 퀵 정렬은 분할 시점부터 비교 연산이 일어나기 때문에 그 후 병합에 들어가는 비용이 매우 적거나 구현 방법에 따라서 아예 병합을 하지 않을 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;복잡도&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;복잡도&lt;/span&gt;&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;쿽 정렬의 성능은 pivot 값을 어떻게 선택하느냐에 크게 달라질 수 있다. 이상적인 경우에는 pivot 값을 기준으로 동일한 개수의 작은 값들과 큰 값들이 분할되어 병합 정렬과 마찬가지로 O(nlog(n))의 시간 복잡도를 가지게 된다.&lt;/li&gt;
  &lt;li&gt;하지만 pivot 값을 기준으로 분할했을 때 값들이 한 편으로 크게 치우치게 되면, 퀵 정렬은 성능은 저하되게 되며, 최악의 경우 한 편으로만 모든 값이 몰리게 되어 O(n^2)의 시간 복잡도를 보이게 된다.&lt;/li&gt;
  &lt;li&gt;따라서 상용 코드에서는 중앙값(median)에 가까운 pivot 값을 선택할 수 있는 섬세한 전략이 요구되며, 배열의 첫값과 중앙값 그리고 마지막값 중에 크기가 중간인 값을 사용하는 방법이 많이 사용된다.&lt;/li&gt;
  &lt;li&gt;퀵 정렬은 공간 복잡도는 구현 방법에 따라 달라질 수 있는데, 입력 배열이 차지하는 메모리만을 사용하는 in-place sorting 방식으로 구현을 사용할 경우, O(log(n))의 공간 복잡도를 가진 코드의 구현이 가능하다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;python-코드&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;Python 코드&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;위의 설명 처럼 기본 컨셉 그대로 코드로 구현할 수 있다. 먼저 리스트의 정 가운데 있는 값을 피벗 값으로 선택하고, 피벗 값보다 작은 값, 동일한 값 그리고 큰 값을 담아둘 3개의 리스트를 생성한다. 그리고 반복문을 통해 각 값을 피벗 비교 후에 해당하는 리스트에 추가시킨다. 그 다음 작은 값과 큰 값을 담고 있는 배열을 대상으로 퀵 정렬 함수를 재귀적으로 호출한다. 마지막으로 재귀 호출의 결과를 다시 크기 순으로 합치면 정렬된 리스트를 얻을 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;quick_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arry&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;less_arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equal_arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greater_arry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;less_arry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;greater_arry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;equal_arry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quick_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;less_arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;equal_arry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quick_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greater_arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quick_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;'''
[1, 2, 3, 4, 5, 6, 7, 8, 9]
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;최적화&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;최적화&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;위의 구현은 간결하고 이해하기 쉽지만 매번 재귀 호출될 때 마다 새로운 리스트를 생성하여 리턴하기 때문에 메모리 사용 측면에서 비효율적이다. 큰 사이즈의 입력 데이터를 다뤄야하는 상용 코드에서는 이러한 단점은 치명적으로 작용할 수 있기 때문에 추가 메모리 사용이 적은 &lt;a href=&quot;https://www.dalecoding.com/algorithms/quick-sort&quot;&gt;in-place 정렬&lt;/a&gt;이 선호한다.&lt;/p&gt;

&lt;p&gt;처음부터 스스로 in-place 정렬을 구현하는 코드를 작성하기는 생각했던 것보다 쉽지 않을 수도 있다. 기존과 동일하게 값의 대소 비교를 위해서는 pivot 값을 사용하지만, 분할은 기준점은 pivot 값이 아닐 수도 있기 때문이다. 왜냐하면, pivot 값을 기준으로 대소 비교를 했을 때 좌측과 우측에 여유 공간이 딱 맞는 경우가 드물기 때문이다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;quick_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;quick_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;'''
[1, 2, 3, 4, 5, 6, 7, 8, 9]
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;코드의 이해가 어려울 수 있기 때문에 글로 설명을 해보자. 메인 함수인 &lt;code class=&quot;highlighter-rouge&quot;&gt;quick_sort&lt;/code&gt;는 크게 &lt;code class=&quot;highlighter-rouge&quot;&gt;sort()&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;partition()&lt;/code&gt;2개의 내부 함수로 나눠진다. &lt;code class=&quot;highlighter-rouge&quot;&gt;sort()&lt;/code&gt;함수는 재귀 함수이며 정렬 범위를 시작 인덱스와 끝 인덱스로 인자를 받는다.&lt;/p&gt;

&lt;p&gt;partition()함수는 정렬 범위를 인자로 받으며 다음 로직을 따라서 좌우측의 값들을 정렬하고 분할 기준점의 인덱스를 리턴한다. 이 분할 기준점(mid)는 sort()를 재귀적으로 호출할 때 우측 리스트의 시작 인덱스로 사용된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;리스트의 정 가운데 있는 값을 피벗을 선택한다.&lt;/li&gt;
  &lt;li&gt;시작 인덱스(low)는 계속 증가 시키고, 끝 인덱스(high)는 계속 감소 시키기위한 while 루프를 두 인덱스가 서로 교차해서 지나칠 때까지 반복시킨다.
    &lt;ul&gt;
      &lt;li&gt;시작 인덱스(low)가 가리키는 값과 피벗 값을 비교해서 더 작은 경우 반복해서 시작 인덱스 값을 증가시킨다. (피벗보다 큰데 좌측에 있는 값을 찾기 위해)&lt;/li&gt;
      &lt;li&gt;끝 인덱스(high)가 가리키는 값과 피벗 값을 비교해서 더 작은 경우 반복해서 끝 인덱스 값을 감소시킵니다. (피벗보다 작은데 우측에 있는 값을 찾기 위해)&lt;/li&gt;
      &lt;li&gt;두 인덱스가 아직 서로 교차해서 지나치치 않았다면 시작 인덱스(low)가 가리키는 값과 끝 인덱스(high)가 가리키는 값을 상호 교대(switch) 시ek. (잘못된 위치에 있는 두 값의 위치를 바꾸기 위해)&lt;/li&gt;
      &lt;li&gt;상호 교대 후, 다음 값을 가리키기 위해 두 인덱스를 각자 진행 방향으로 한 칸씩 이동 시킨다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;두 인덱스가 서로 교차해서 지나치게 되어 while 루프를 빠져나왔다면 다음 재귀 호출의 분할 기준점이될 시작 인덱스를 리턴한다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 05 Mar 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/study/2023/03/05/%ED%80%B5-%EC%A0%95%EB%A0%AC(Quick-Sort).html</link>
        <guid isPermaLink="true">http://localhost:4000/study/2023/03/05/%ED%80%B5-%EC%A0%95%EB%A0%AC(Quick-Sort).html</guid>
        
        <category>algorithm</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>[Algorithm] 삽입 정렬 (Insertion Sort)</title>
        <description>&lt;h1 id=&quot;삽입-정렬insertion-sort&quot;&gt;삽입 정렬(Insertion Sort)&lt;/h1&gt;

&lt;h3 id=&quot;개념&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;개념&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://laagom.github.io/study/2023/02/02/%EC%84%A0%ED%83%9D-%EC%A0%95%EB%A0%AC(Selection-Sort).html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;선택정렬&lt;/code&gt;&lt;/a&gt;,&lt;a href=&quot;https://laagom.github.io/study/2023/01/25/%EA%B1%B0%ED%92%88-%EC%A0%95%EB%A0%AC(Bubble-Sort).html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;거품정렬&lt;/code&gt;&lt;/a&gt;과 더불어 시간복잡도를 O(N^2)가지고 있는 삽입정렬에 대해 알아보려고 한다. 시간 복잡도가 O(N^2)을 가지고 있다고 하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;선택정렬&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;삽입정렬&lt;/code&gt;보다 좀 더 효율적인 알고리즘이다. 최선의 경우에는 O(N)이라는 엄청나게 빠른 효율성을 가지고 있어 &lt;code class=&quot;highlighter-rouge&quot;&gt;다른 정렬 알고리즘의 일부로 사용될 만큼 좋은 정렬 알고리즘&lt;/code&gt;이다.&lt;/p&gt;

&lt;p&gt;삽입 정렬은 정렬 범위를 1칸씩 확장해나가면서 새롭게 정렬 범위에 들어온 값을 기존 값들과 비교하여 알맞은 자리에 넣어주는 알고리즘이다. 좀더 자세하게 말하면 2번째 원소부터 시작하여 그 앞(왼쪽)의 원소들과 비교하여 삽입할 위치를 지정한 후 원소를 뒤로 옮기고 지정된 자리에 자료를 삽입하여 정렬하는 구조를 가지고 있다.&lt;/p&gt;

&lt;p&gt;이제 하나의 배열을 가지고 위에서 설명한 &lt;code class=&quot;highlighter-rouge&quot;&gt;삽입 정렬&lt;/code&gt;이 어떻게 진행되는지 알아보자.&lt;/p&gt;

&lt;p&gt;예를 들어, 다음과 같이 1부터 5까지 총 5개의 숫자가 들어있는 배열에 있다고 가정해보자.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[2, 1, 5, 4, 3]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;맨 처음에는 첫번째 2개의 값만 정렬 범위에 포함을 시키고, 앞에 있는 값 &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;가 뒤에 있는 값 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;보다 크기 대문에 서로의 자리를 바꿔준다.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[2, 1] : 2 &amp;gt; 1 =&amp;gt; switch

[1, 2] 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그 다음에는 기존의 정렬 범위에 한칸 확장하여 세번째 값을 추가하고, 기존 정렬 범위에서 가장 큰 값인 &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;와 새롭게 추가된 &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;를 비교하면 자리를 바꿀 필요가 없다는 것을 알 수 있다. 기존에 정렬 범위에 있던 두 개의 값은 이 전 패스에서 이미 정렬이 되어 있기 때문에 굳이 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;를 비교할 필요가 없다.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[1, 2, 5] : 2 &amp;lt; 5 =&amp;gt; OK

[1, 2, 5]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;다음 패스에서는 정렬 범위를 한 칸 더 확장하여 4번째 값을 추가시키고, 기존 정렬 범위에서 가장 큰 값인 &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;와 새롭게 추가된 &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt;를 비교하면, 앞의 값이 뒤에 있는 값보다 크기 때문에 서로의 자리를 바꿔준다. 이제 기존 정렬 범위에서 두번째로 큰 값인 &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;와 방금 자리를 교체 당한 &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt;를 비교해보면 더 이상 자리를 바꿀 필요가 없다는 것을 알 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[1, 2, 5, 4] : 5 &amp;gt; 4 =&amp;gt; switch

[1, 2, 4, 5] : 2 &amp;lt; 4 =&amp;gt; OK

[1, 2, 4, 5]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;마지막 패스에서는 정렬 범위를 전체로 확장하여 마지막까지 포함시키고, 지금까지 했던 방식과 동일하게 새로 추가된 값과 기존에 있던 값들을 비교하며 2번의 자리 교체가 필요한 것을 알 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[1, 2, 4, 5, 3] : 5 &amp;gt; 3 =&amp;gt; switch

[1, 2, 4, 3, 5] : 4 &amp;gt; 3 =&amp;gt; switch

[1, 2, 3, 4, 5] : 2 &amp;lt; 3 =&amp;gt; OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;gif로-이해하는-insertion-sort&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;GIF로 이해하는 Insertion Sort&lt;/span&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/insertion-sort-001.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;특징&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;특징&lt;/span&gt;&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;선택/거품 정렬은 패스가 거듭될 수록 탐색 범위가 줄어드는 반면 삽입 정렬은 오히려 점점 정렬 범위가 넓어진다.&lt;/li&gt;
  &lt;li&gt;큰 그림에서 보았을 때 바깥 쪽 루프는 순방향, 안 쪽 루프는 역방향으로 진행하고 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;복잡도&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;복잡도&lt;/span&gt;&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;삽입 정렬은 별도의 추가 공간을 사용하지 않고 주어진 배열이 차지하고 있는 공간 내에서 값들의 위치만 바꾸기 때문에 O(1)의 공간 복잡도를 가진다.&lt;/li&gt;
  &lt;li&gt;시간 복잡도는 우선 루프문을 통해 정렬 범위를 2개로 시작해서 전체로 확장해야 하기 때문에 기본적으로 O(N)의 시간 소모를 하며, 각 패스에서 정렬 범위에 새롭게 추가된 값과 기존 값들의 대소 비교 및 자리 교대를 위해 O(N)의 시간이 필요하다. 따라서 삽입 정렬은 총(N^2)의 시간 복잡도를 가지는 정렬 알고리즘이다.&lt;/li&gt;
  &lt;li&gt;최적화를 통해 부분적으로 정렬된 배열에 대해 성능을 대폭 개선할 수 있으며, 특히 완전히 정렬되어 있는 배열이 들어오는 경우 O(N)까지도 시간 복잡도를 향상시킬 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;python-코드&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;Python 코드&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;두 개의 반복문이 필요하며, 내부 반복문에서는 정렬 범위에 새롭게 추가된 값과 기존 값들을 뒤에서 부터 비교해가며 앞의 값이 뒤의 값보다 큰 경우 바꿔주며, 외부 반복문을 정렬 범위 2~N까지 확대해 나간다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;'''
[1, 2, 3, 4, 5, 6, 7, 8, 9]
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;최적화&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;최적화&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;기존에 있던 값들은 이전 패스에서 모두 정렬되었다는 점을 활용하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;불필요한 비교 작업을 제거&lt;/code&gt;할 수 있다. 예를 들면, 아래와 같이 기존 정렬 범위 &lt;code class=&quot;highlighter-rouge&quot;&gt;[1, 2, 3, 5]&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt;가 새롭게 추가된다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt;보다 크기 때문에 switch가 필요하지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt;보다 작기 때문에 switch는 필요가 없다. 그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt;보다 앞에 있는 숫자들은 기존 패스에서 이미 정렬을 해놓았기 때문에 당연히 3보다는 작을 것이며, 더 이상의 &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt;와 대소 비교는 무의미하다. 이 사실을 이용하면, 새롭게 추가되는 값보다 작은 숫자를 만나는 최초의 순간만 내무 반복문을 수행해도 된다.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[1, 2, 3, 5, 4, ...] 5 &amp;gt; 4 =&amp;gt; switch

[1, 2, 3, 4, 5, ...] 3 &amp;lt; 4 =&amp;gt; OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 최적화를 적용하면, 정렬된 배열이 들어올 경우, O(N)의 시간 복잡도를 달성할 수 있다. 예를 들어, 다음과 같이 5개의 숫자가 배열이 들어오면 각 패스 당 단 한 번 총 4번의 비교만으로 해당 배열이 완전히 정렬되었음을 알아내고 삽입 정렬을 완료할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[1, 2] : 1 &amp;lt; 2 =&amp;gt; OK

[1, 2, 3] : 2 &amp;lt; 3 =&amp;gt; OK

[1, 2, 3, 4] : 3 &amp;lt; 4 =&amp;gt; OK

[1, 2, 3, 4, 5] : 4 &amp;lt; 5 =&amp;gt; OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;최적화2&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;최적화2&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;switch작업 없이 단순히 값들을 옮기는 것만으로 삽입 정렬을 구현할 수 있다. 앞의 값 정렬 범위에 추가시칸 값보다 큰 경우 값을 뒤로 밀다가 최초로 작은 값을 만나는 순간 그 뒤에 추가된 값을 꼽으면 된다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;to_insert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_insert&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;결론&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;결론&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;삽입 정렬에서 코드를 최적화 하는 방법은 loop를 돌면서 사전에 정렬이 완료된 과정이 존재하면 그 이후 발생하는 불필요한 탐색(비교)를 없애면 좀 더 효율 적으로 사용할 수 있다는 것이다.&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Mar 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/study/2023/03/05/%EC%82%BD%EC%9E%85-%EC%A0%95%EB%A0%AC(Insertion-Sort).html</link>
        <guid isPermaLink="true">http://localhost:4000/study/2023/03/05/%EC%82%BD%EC%9E%85-%EC%A0%95%EB%A0%AC(Insertion-Sort).html</guid>
        
        <category>algorithm</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>[It Information] 웹 프레임워크(web framework)</title>
        <description>&lt;h1 id=&quot;web-framework&quot;&gt;Web Framework&lt;/h1&gt;

&lt;p&gt;웹 응용 프로그램 점점 대중화됨에 따라 점점 프로그래밍 개발도 접근하기 쉬워지고 있다. 몇 년 전까지만 해도 코딩과 프로그래밍은 오랜 교육을 받은 소수의 사람들만 접근할 수 있었지만 오늘날에는 소프트웨어를 만들기위한 주요 지식만 습득한채 프로그래밍을 할 수 있게 되었다.&lt;/p&gt;

&lt;p&gt;현재에는 초보자와 전문가 모두 작업을 쉽게 만들어 주는 도구를 사용하여 프로그래밍을 하는데 그것이 바로 &lt;code class=&quot;highlighter-rouge&quot;&gt;웹 프레임워크&lt;/code&gt; 이다. 그렇다면 개발자에서 프로그래밍을 쉽게 만들어주는 &lt;code class=&quot;highlighter-rouge&quot;&gt;웹 프레임워크&lt;/code&gt; 가 무엇인지 알아보도록 하자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;web-framework란&quot;&gt;Web Framework란?&lt;/h3&gt;

&lt;p&gt;웹 프레임워크는 웹 개발 프로세스의 일부 측면을 자동화하여 더 쉽고 빠르게 만들 수 있는 소프트웨어 도구이다. 즉, 웹사이트, 웹 업플리케이션, 모바일 앱 또는 소프트웨어의 아키텍처를 구축하는데 도움이되는 모델 및 라이브러리인 것이다.&lt;/p&gt;

&lt;p&gt;더 자세하게 설명하자면 &lt;code class=&quot;highlighter-rouge&quot;&gt;사용자 인터페이스 / 비즈니스 규칙 / 데이터 모델&lt;/code&gt;을 분리하여 웹 페이지 개발 하는 과정에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;DB연동&lt;/code&gt; 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTML템플릿 양식&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Session&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;코드 재사용&lt;/code&gt; 등의 개발자의 번거로움이 들어가는 부분들을 해결해 주며 여러 기능들을 제공한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;프레임워크와-라이브러리의-다른점&quot;&gt;프레임워크와 라이브러리의 다른점&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;라이브러리&lt;/code&gt;도 &lt;code class=&quot;highlighter-rouge&quot;&gt;프레임워크&lt;/code&gt;와 마찬가지로 프로젝트를 개발하는데 있어 기능을 제공해주고 개발자에게 편리함을 주는데 왜 다른명칭으로 불릴까?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;라이브러리 :  우리가 개발하려는 모듈이나 프로젝트에 적합한 기능을 제공해준다.&lt;/li&gt;
  &lt;li&gt;프레임워크 : 물론 적합한 기능을 제공해주는 역할도 있지만 그것보다 하나의 완성된 안전한 프로젝트 구조에 맞는 틀, 즉 패키지를 제공해주는 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;쉽게 말하면 라이브러리는 우리 입맛에 맞게 사용하는 기능이라면 프레임워크는 우리가 그 구조나 패키지에 맞게 개발을 해야한다는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;web-framework를-사용하면-좋은점&quot;&gt;Web Framework를 사용하면 좋은점&lt;/h3&gt;

&lt;p&gt;서비스를 구현하는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;패키지 및 모듈을 제공&lt;/code&gt;하여 프로그래밍의 간편함과 속도를 높여줄 뿐만아니라 어떤 개발자라도 프로그래밍하는데 있어 필요하지만 매번 하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;공통적인 작업들을 일괄적으로 처리&lt;/code&gt;해주며 그 부분에 신경을 덜 쓸 수 있게 해준다. 또한 &lt;code class=&quot;highlighter-rouge&quot;&gt;개발 중에 발생한 오류등을 쉽게 찾을 수 있는 디버깅이나 테스트를 제공&lt;/code&gt;하여 오로지 어플리케이션 로직에 더 신경 쓸 수 있는 장점이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;보안&lt;/code&gt; : 프레임워크는 여러 관점에서 보안을 제공한다. 외부 공격 및 문제, 충돌 속도 저하 및 기타 부정적인 측면으로부터의 보안해주며 어플리케이션의 품질이 저하될 수 있는 경우를 줄여준다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;확장성&lt;/code&gt; : 프레임워크는 매우 유연하다. 간단한 소프트웨어 도구에서 복잡한 도구까지 웹 어플리케이션을 구축할 때 동일한 프레임워크를 사용할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;web-framework의-유형&quot;&gt;Web Framework의 유형&lt;/h3&gt;

&lt;p&gt;일단 본인은 백엔드 개발자이기 때문에 백엔드 웹 프레임워크에 대해 알아보려고 한다. 백엔드 웹 프레임워크에는 두 가지 주요 유형이 존재한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;클라이언트 측 웹 프레임워크&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;이 프레임워크는 사용자 인터페이스에 보다 엄격하게 초점을 맞춘 프레임워크라고 보면 된다. 이는 클라이언트 측에 사용자가 시각적으로 바라보고 프로그램과 상호 작용하는 방법 등과 관련되 모든 측면이 포함된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;서버 측 웹 프레임워크&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;서버 측 프레임워크는 백엔드 기능에 사용된다. 여기서 말하는 백엔드 기능이라 하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;데이터베이스 조작&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;데이터 관리&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;웹 서버 관리&lt;/code&gt; 등이 있다.&lt;/p&gt;

&lt;p&gt;이렇게 분류되는 방법 외에도 웹프레임워크를 분류하는 다른 방법도 존재하는데 대표적으로 프로그래밍 언어를 고려하는 것이다. Python, Javascript, .NET, JAVA가 가장 널리 사용되고 있는데 이런 언어에 따라 사용하는 프레임워크가 다른 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;언어마다-대표적으로-사용되는-web-framework&quot;&gt;언어마다 대표적으로 사용되는 Web Framework&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Django&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;가벼운 사이트보다 좀 더 무겁고 복잡한 경우 Django를 사용할 수 있다. 데이터베이스 기반의 복잡한 웹사이트 구축에 중점을 둔 Python기반 웹 프레임워크이다. Python을 사용하며 고성능 웹사이트를 보유하는 것이 우선된다면 Django를 선택해야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Django는 &lt;code class=&quot;highlighter-rouge&quot;&gt;확장성이 뛰어나며&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;코드 재사용성 기능&lt;/code&gt;을 통해 개발자는 웹사이트에서 증가하는 트래픽에 쉽게 적응할 수 있다.&lt;/li&gt;
  &lt;li&gt;Django는 &lt;a href=&quot;https://www.next-t.co.kr/seo/%EA%B2%80%EC%83%89%EC%97%94%EC%A7%84%EC%B5%9C%EC%A0%81%ED%99%94seo%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/&quot;&gt;SEO 지향적&lt;/a&gt;이다. 즉, Django를 기반으로 하는 웹사이트는 최적화가 쉽고 SEO 친화적이다. 주된 이유 중 하나는 IP 주소가 아닌 URL을 통해 서버에서 Django 기반 어플리케이션을 유지할 수 있기 때문이다.&lt;/li&gt;
  &lt;li&gt;매우 인기 있는 백엔드 프레임워크인 Django는 도구를 사용하는 모든 사람을 지원할 준비가 된 &lt;code class=&quot;highlighter-rouge&quot;&gt;대규모 커뮤니티를 신뢰&lt;/code&gt;할 수 있다.&lt;/li&gt;
  &lt;li&gt;Django 프레임워크가 코드없는 프레임워크는 아니지만 개발자가 &lt;code class=&quot;highlighter-rouge&quot;&gt;코드를 사용하지 않고 활용할 수 있는 패키지&lt;/code&gt;가 있다.&lt;/li&gt;
  &lt;li&gt;데이터베이스 기반의 웹사이트에 적합하지만 그외 &lt;code class=&quot;highlighter-rouge&quot;&gt;다른 유형의 웹 사이트를 만드는 데 사용해도 무방&lt;/code&gt;하다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MVT(Model and View and Template)패턴&lt;/code&gt;을 가진다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ORM(Objective Relational Mapping) 객체관계매핑&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;데이터베이스 운영을 파이썬으로 할 수 있게 한다. 다양한 데이터 베이스를 적용해야 해는 어플리케이션에서 강점을 지닌다.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Model&lt;/strong&gt;은 데이터 정보를 가공해주고 주고 받는 역할을 하는 컴포넌트이며&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;View&lt;/strong&gt;는 데이터를 입력을 받거나 Model에서 넘겨주는 데이터를 출력하는 컴포넌트이다. 이 View부분에서 사용자가 시각적으로 데이터 정보를 볼 수 있다.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Template&lt;/strong&gt;는 Model 과 View사이에서 사용자의 이벤트를 처리하는 컴포넌트에 속한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Express.js&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Express.js는 javascript 기반의 백엔드 웹 어플리케이션 프레임워크이다. 웹 응용 프로그램 및 모바일 앱을 만드는 것을 목표로 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개발자의 작업을 쉽게 해주는 많은 표준 Node.js 기능을 사용할 수 있다.&lt;/li&gt;
  &lt;li&gt;Express는 웹 페이지를 만드는 데 도움이 되는 몇 가지 템플릿을 제공한다.&lt;/li&gt;
  &lt;li&gt;Express.js에서는 버그가 포함된 코드의 정확한 부분을 더 쉽게 식별할 수 있으므로 디버깅이 더 쉬워진다.&lt;/li&gt;
  &lt;li&gt;Express.js는 확장성이 뛰어난 프레임워크이다. 앞서 언급했듯이 확장성을 통해 프로젝트 및 요구 사항이 증가함에 따라 동일한 프레임워크를 유지할 수 있다.&lt;/li&gt;
  &lt;li&gt;Express.js는 매우 인기 있는 백엔드 프레임워크이기 때문에 개발자들은 서로 작업을 지원하고 필요할 때 도움을 제공하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;대규모 커뮤니티에 의존&lt;/code&gt;할 수 있다.&lt;/li&gt;
  &lt;li&gt;Express.js를 사용하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;프론트엔드 및 백엔드 웹 개발 모두에 동일한 프로그래밍 언어(JavaScript)를 사용한다&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Flask&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Flask는 Python기반의 WSGI 프레임워크이다. 사용자의 브라우저가 아닌 웹 서버를 실행한다. Flask를 사용하면 원할하게 실행되는 매우 개인화된 프로젝트를 만들 수 있기 때문에 많은 최신 웹 응용 프로그램이 Flask에서 실행된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Flask를 사용하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;내장된 웹 개발 서버가 제공된다&lt;/code&gt;. 이를 통해 디버깅이 더 쉬워지고 요청에 실수가 발생할 때 개발자가 브라우저에서 Python 코드를 구현할 수 있다.&lt;/li&gt;
  &lt;li&gt;Python을 기반으로 하는 Flask를 사용하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;애플리케이션을 빠르게 개발할 수&lt;/code&gt;있다. Python은 다른 개발 프로그래밍 언어보다 코딩이 덜 필요한 것으로 알려져 있다.&lt;/li&gt;
  &lt;li&gt;Flask를 사용하면 웹 서버를 쉽게 설정할 수 있다.&lt;/li&gt;
  &lt;li&gt;빠른 학습 곡선: Flask는 배우기 쉬운 것으로 알려져 있지 않다. Flask를 둘러싼 커뮤니티는 너무 커서 수많은 문서와 튜토리얼을 찾을 수 있다. 많은 문서는 Flask 개발자 자신이 제공한다. 초보자도 빠르게 배울 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Ruby on Rails&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ruby on Rails는 Ruby 프로그래밍 언어를 기반으로 하는 웹 개발 프레임워크이다. Ruby는 가장 인기 있는 프로그래밍 언어는 아니지만 Ruby on Rails는 단순성, 자동화된 테스트 및 라이브러리를 제공하여 프로그래밍 프로세스 중에 개발자를 돕기 때문에 매우 인기 있는 백엔드 프레임워크이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ruby on Rails는 개발자가 작성한 코드에 대해 자동화된 테스트를 실행한다. 많은 시간을 절약하는 데 도움이 된다.&lt;/li&gt;
  &lt;li&gt;Ruby on Rails는 또한 매우 다양하고 유연하다. 이를 통해 개발자는 프로젝트를 완전히 제어할 수 있다. 개발자는 애플리케이션 데이터베이스의 작동 방식을 결정할 수 있다. 그런 다음 프레임워크는 개발자의 지시에 따라 자동으로 코드를 생성한다. 다시 말하지만, 이것은 일을 더 쉽고 빠르게 만드는 방법이다.&lt;/li&gt;
  &lt;li&gt;Ruby on Rails는 개발자가 데이터베이스를 구축하는 데 필요한 도구를 찾을 수 있는 많은 라이브러리를 제공한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Spring&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Spring은 Java를 사용하는 웹 개발 프레임워크이다. 복잡한 웹사이트 구축 플랫폼인 Wix와 같은 많은 인기 있고 고성능 웹 사이트를 만드는 데 사용되었다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;매우 인기 있는 프로그래밍 언어인 Java를 기반으로 하는 Spring은 매우 인기가 있으며 지원을 위해 광범위한 커뮤니티에 의존할 수 있다.&lt;/li&gt;
  &lt;li&gt;Spring의 성능을 높일 수 있는 많은 자매 프로젝트와 함께 제공된다.&lt;/li&gt;
  &lt;li&gt;Spring은 특히 함께 제공되는 사이드 프로젝트 덕분에 확장성이 뛰어나다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;결론&quot;&gt;결론&lt;/h3&gt;

&lt;p&gt;이러한 프레임워크의 대부분은 인기 있는 프로그래밍 언어로 작성되어 프로젝트를 구현하는 데 유용한 기능을 제공한다. 올바른 서버 환경을 선택하는 것은 프로젝트의 고유한 요구 사항에 따라 다르며 어떤 서버 프레임워크르 ㄹ사용하는 것이 가장 좋은지 고려하는 것은 작업에 달려있다.&lt;/p&gt;

&lt;p&gt;결국 웹 개발 프레임 워크의 목적을 이해하는 방법은 작성해야 하는 코드의 양을 줄이는 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[2022년 웹 개발을 위한 상위 10가지 최고의 웹 백엔드 프레임워크&lt;/td&gt;
      &lt;td&gt;AppMaster](https://appmaster.io/ko/blog/10gaji-coegoyi-web-baegendeu-peureimweokeu)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</description>
        <pubDate>Fri, 03 Mar 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/study/2023/03/03/Web-Framework.html</link>
        <guid isPermaLink="true">http://localhost:4000/study/2023/03/03/Web-Framework.html</guid>
        
        <category>it_information</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>[Data Structure] 해시 충돌(Hash Collision)</title>
        <description>&lt;h1 id=&quot;해시-충돌hash-collision&quot;&gt;해시 충돌(Hash Collision)&lt;/h1&gt;
&lt;p&gt;앞서 &lt;a href=&quot;https://laagom.github.io/study/2023/02/24/%ED%95%B4%EC%8B%9C(Hash).html&quot;&gt;해시(Hash)가 무엇인지?&lt;/a&gt; 어떻게 사용하는지 기본적인 자료구조 해시(Hash)에 대해 알아 보았다.&lt;/p&gt;

&lt;p&gt;Hash Table은 몇가지 기본 기능을 제공하는데&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;데이터 삽입(저장)&lt;br /&gt;
  Hash Table에서 데이터를 저장하기 위해 먼저 Hash Function을 이용하여 key값을 hash로 변경한다. 이후 미리 준비해둔 저장소(bucket, slot) 중에 알맞는 hash값을 찾아 value를 저장한다. 이 과정은 &lt;code class=&quot;highlighter-rouge&quot;&gt;시간복잡도 O(1)&lt;/code&gt; 을 가진다.&lt;/li&gt;
  &lt;li&gt;데이터 삭제&lt;br /&gt;
  저장되어 있는 값을 삭제하기 위해서 bucket에서 삭제하려고 하는데 key와 매칭되는 value값을 찾아서 삭제한다. 이러한 과정은 &lt;code class=&quot;highlighter-rouge&quot;&gt;시간복잡도 O(1)&lt;/code&gt;을 가진다.&lt;/li&gt;
  &lt;li&gt;데이터 검색&lt;br /&gt;
  key를 이용하여 value를 찾아내는 과정이며, 먼저 key값과 hash function을 이용해 hash를 찾아내고 해당 hash로 value값을 찾을 수 있다. 이 과정은 &lt;code class=&quot;highlighter-rouge&quot;&gt;시간복잡도 O(1)&lt;/code&gt;을 가진다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같이 hash table은 데이터 저장, 삭제, 검색이 많이 필요한 경우 자주 사용되며 각각 기능마다 &lt;code class=&quot;highlighter-rouge&quot;&gt;시간복잡도 O(1)&lt;/code&gt;을 가지는 아주 효율적인 자료구조이다.&lt;/p&gt;

&lt;p&gt;하지만 효율적인 만큼 &lt;code class=&quot;highlighter-rouge&quot;&gt;단점도&lt;/code&gt; 존재하는데 먼저 hash값들을 저장할 공간(bucket)을 지정해야하므로 일반적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;저장 공간이 많이 필요&lt;/code&gt;로한다.&lt;/p&gt;

&lt;p&gt;또한 여러 key에 해당하는 hash(주소)가 동일한 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;해시 충돌(Hash Collision)&lt;/code&gt;이 발생한다.&lt;/p&gt;

&lt;h2 id=&quot;해시-충돌hash-collision이란&quot;&gt;해시 충돌(Hash Collision)이란?&lt;/h2&gt;
&lt;p&gt;위에서 hash table의 단점으로 언급한 여러 key에 해당하는 hash가 동일한 경우를 &lt;code class=&quot;highlighter-rouge&quot;&gt;해시 충돌(Hash Collision)&lt;/code&gt;이라고 부른다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/hash_collision-001.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;amp;blogId=alwaysneoi&amp;amp;logNo=100164276686&quot;&gt;비둘기집의 원리&lt;/a&gt;로 인해 hash를 이용한 자료구조에서는 무조건적으로 일어날 수 밖에 없는 현상이라고 한다.&lt;/p&gt;

&lt;p&gt;해시 함수(hash function)가 모든 입력에 대해 항상 다른 해시 값을 부여할 수 있다면 이상적이지만 모든 데이터에 대해 알고 있지 않다면 완벽한 해시 함수(hash function)를 작성하는 것은 불가능하다.&lt;/p&gt;

&lt;p&gt;위의 이미지와 같이 John Smith와 Sandra Dee가 해시 함수(hash function)을 통과하면 02라는 동일한 hash값을 부여받게 된다. 즉, 데이터는 많은데 공간이 제약되어 있어 동일한 hash값을 부여 받아 충돌이 일어나는 것이다. 공간을 넓힐 수 있다면 최대한 넓히는 게 좋지만 현실의 메모리는 한정되어 있기때문에 알고리즘을 설계할때 충돌을 최소화할 수 있는지 충돌이 발생했을 때 어떤 방식으로 처리할지를 잘 생각해 놔야 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;해시-테이블hash-table-구현&quot;&gt;해시 테이블(Hash Table) 구현&lt;/h2&gt;
&lt;p&gt;먼저 Python을 이용하여 Hash 데이터 구조와 여러 기능을 간단히 구현해보자. 아래는 Python을 이용하여 hash table을 List로 구현한 것이다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table_size&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# 총 공간(bucket) 수
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# 빈 hash table 생성     
&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# key(문자) 첫 문자의 유니코드를 반환
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hashFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# key의 hash 값을 반환
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# hash address를 반환
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;myKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hashFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# 데이터 저장
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# key에 해당하는 value 반환
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2222&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3333&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4444&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# [0, 1111, 2222, 3333, 4444, 0, 0, 0]
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 4444
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# [0, 1111, 2222, 3333, 0, 0, 0, 0]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;해시-충돌-시-알고리즘-2가지&quot;&gt;해시 충돌 시 알고리즘 2가지&lt;/h2&gt;
&lt;p&gt;충돌은 불가피하니 충돌 시 데이터 처리하는 2가지 방법이 존재한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-chaningopen-hashing&quot;&gt;🔖 Chaning(Open Hashing)&lt;/h3&gt;
&lt;p&gt;해시 테이블 저장공간 외의 공간을 활용하는 기법인 Chaning(체이닝)방법이다.&lt;/p&gt;

&lt;p&gt;즉, 충돌이 일어나면, Linked List로 데이터를 추가로 뒤에 연결시켜서 저장하는 기법이다. 
&lt;img src=&quot;/assets/resources/hash%20collision(linked%20list)-001.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Python은 List가 있기 때문에 Linked List로 반드시 만들 필요는 없다. 모든 공간을 List형식으로 만들어서 값이 중복되면 리스트에 하나씩 추가하는 방식으로 구현이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;장점&lt;/code&gt;은 모든 값을 넣을 수 있다는 것과 데이터가 일단 저장이 되므로 메모리 소모가 적다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;단점&lt;/code&gt;은 Chaing을 통해 hash table을 생성하였을 때 기능들의 시간 복잡도가 O(n)까지 늘어날 수 있다.&lt;/p&gt;

&lt;p&gt;하지만 충돌이 일어나는 곳에 계속 데이터가 늘어나게 되면 한 공간에만 저장되는 쏠림 현상이 일어날 수 있어서 검색을 할 때는 좋지 않은 현상이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-chaning-과정동작-방식&quot;&gt;🔖 Chaning 과정(동작 방식)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;키의 해시값을 계산한다.&lt;/li&gt;
  &lt;li&gt;해시 값에 해당하는 리스트 인덱스를 구한다.&lt;/li&gt;
  &lt;li&gt;같은 해시 값을 가진 키가 있다면(Hash Collision) List로 연결한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Chaining&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table_size&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hashFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;myKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hashFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 해시 충돌 시
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])):&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 빈 bucket 탐색
&lt;/span&gt;                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 해시 충돌 시
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 일치하는 key 값 찾음 
&lt;/span&gt;                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 일치하는 value 반환
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;del&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Chaining&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;h_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'aa'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'1111'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'aa'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# 1111
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'aa'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ab'&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# 97
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# 97  같은 hash 값을 가짐 -&amp;gt; 해시 충돌
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ab'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'2222'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# [0, [['aa', '1111'], ['ab', '2222']], 0, 0, 0, 0, 0, 0]
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'aa'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 1111
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ab'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 2222
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'aa'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# [0, [['ab', '2222']], 0, 0, 0, 0, 0, 0]
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# False
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실제로 8개의 공간에 9개의 데이터를 넣어보면 무조건 1개 이상 충돌이 날수밖에 없기 때문에 chaning기법에 의해 공간안에 리스트 길이가 2이상인 경우가 발생한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-linear-probing-기법&quot;&gt;🔖 Linear probing 기법&lt;/h3&gt;
&lt;p&gt;Linear probing은 -폐쇄 해시 또는 Close Hashing 기법 중 하나로 Hash Table 저장공간 안에서 충돌 문제를 해결하는 기법이다. 즉, 충돌이 일어나면 해당 Hash Address의 다음 address부터 맨 처음 나오는 빈 공간에 저장하는 기법이다. chaining처럼 한쪽 쏠림현상을 없애고 저장공간 활용도를 높이기 위한 기법이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/linear-probing.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OpenAddressing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table_size&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
        
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hashFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;myKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hashFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# hash 의 값이 이미 존재할때 (해시충돌)
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# hash 가 비었을때
&lt;/span&gt;            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;h_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OpenAddressing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;data1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'aa'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ab'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;## 97 97  -&amp;gt; 해시 충돌
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'aa'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'1111'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;h_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ab'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'2222'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# [0, ['aa', '1111'], ['ab', '2222'], 0, 0, 0, 0, 0]
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ab'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 2222
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;h_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'aa'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h_table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# [0, 0, ['ab', '2222'], 0, 0, 0, 0, 0]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 chaining와 다르게 한 저장소에 저장되는 것이 아니라 다음 저장소에 되는 모습을 볼 수 있고 삭제 시에도 동일한 hash 값을 받아 저장되었더라도 delete()처리 시 해당 key와 동일한 값을 찾아 삭제할 수 있게 하였다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;충돌예방을-위해-할-수-있는-것&quot;&gt;충돌예방을 위해 할 수 있는 것&lt;/h2&gt;
&lt;p&gt;충돌 방지를 위해서는 2가지 조치를 취할 수 있다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;공간을 늘린다.&lt;/li&gt;
  &lt;li&gt;해시함수를 좋은 걸로 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;공간을 최대한 늘리던지 그게 아니면 충돌이 잘 안되는 해시함수를 사용하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;해시함수hash-function의-중요성&quot;&gt;해시함수(Hash Function)의 중요성&lt;/h2&gt;
&lt;p&gt;해시테이블(Hash Table)의 충돌은 불가피하다. 충돌은 왠만하면 피하는게 상책이다. 그러기 위해선 해시함수를 잘 정해서 충돌을 방지해야한다.&lt;/p&gt;

&lt;p&gt;해시함수를 거쳐 나온 hash_address를 고정 값으로 만드는 것도 한 방법이다. hash()함수는 키 값 고정이 안되서 이를 고정값으로 만들 수 있는 라이브러리가 있다. hashlib라는 라이브러리인데 SHA1, SHA224, SHA256, SHA384, SHA512 등 좋은 해시 함수를 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;키값을-고정시켜야-하는-이유시간-복잡도&quot;&gt;키값을 고정시켜야 하는 이유(시간 복잡도)&lt;/h2&gt;
&lt;p&gt;키 값을 고정시켜야 하는 이유는 충돌 기복을 줄일 수 있기 때문이다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;충돌이 하나도 일어나지 않았을 경우 O(1)&lt;/li&gt;
  &lt;li&gt;충돌이 모두 일어나면 O(n)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;데이터가 많으면 많을수록 충돌이 일어날 확률이 높아지는데 충돌이 안일어난다면 시간복잡도를 많이 줄일 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;
&lt;p&gt;해시테이블(Hash Table)의 충돌 방지 방법에 대해 알아보았다. 위에서 알아본 방법들은 자료구조와 알고리즘을 위해 학습한거지만 Python에서는 Dictionary로 하기 때문에 아마 거의 사용하지 않을 것 같다.&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Feb 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/study/2023/02/27/%ED%95%B4%EC%8B%9C-%EC%B6%A9%EB%8F%8C(Hash-Collision).html</link>
        <guid isPermaLink="true">http://localhost:4000/study/2023/02/27/%ED%95%B4%EC%8B%9C-%EC%B6%A9%EB%8F%8C(Hash-Collision).html</guid>
        
        <category>data_structure</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>[Data Structure] 해시(Hash)</title>
        <description>&lt;h1 id=&quot;해시hash&quot;&gt;해시(Hash)&lt;/h1&gt;
&lt;p&gt;일반적으로 말하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;해시(Hash)&lt;/code&gt;는 해시 테이블(Hash Table)로 Key와 Value를 매핑해서 데이터를 저장하는 자료구조이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Python에서는 기본적으로 제공되는 딕셔너리 자료형이 해시 테이블과 동일한 구조를 가진다.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;해시&lt;/code&gt;에 대해 자세히 학습하기 전에 &lt;code class=&quot;highlighter-rouge&quot;&gt;해시&lt;/code&gt;에 사용되는 용어 먼저 알아보고 가자&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;용어&quot;&gt;용어&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;키(Key)&lt;/code&gt;: 고유의 값으로 해시 함수의 Input에 해당. 다양한 길이의 값이 될 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;해시 테이블(Hash Table) or 해시 맵(Hash Map)&lt;/code&gt;: Key와 Value를 매핑해서 데이터를 저장하는 자료구조이다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;해시 함수(Hash Function)&lt;/code&gt;: 임의의 값을 고정된 길이의 데이터로 변환하는 함수. 다양한 길이의 키를 고정된 길이의 해시로 변환시키므로 저장소를 효율적으로 운영할 수 있게 해준다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;해시(Hash)&lt;/code&gt;: 해시 함수의 output으로 해시 값과 매칭되어 버킷에 저장된다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;해시 값(Hash Value)&lt;/code&gt;: 키에 해시 함수를 적용하여 얻는 해시 값&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;버킷(Bucket)&lt;/code&gt;: 한 개의 데이터를 저장할 수 있는 공간
&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/hash-structure-001.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다양한 길이를 가지고 있는 Key값에 해시 함수를 적용시키면 00, 01, 02와 같이 고정된 길이의 데이터로 변환된다. 이렇게 변환된 데이터가 &lt;code class=&quot;highlighter-rouge&quot;&gt;해시 값&lt;/code&gt;이고, 버킷에는 키와 매핑된 원래 데이터를 저장하게 된다. &lt;code class=&quot;highlighter-rouge&quot;&gt;결과적으로 변환된 키값과 버킷에 매핑되어 있는 데이터를 해시라 하고 이러한 자료구조를 해시 테이블&lt;/code&gt;이라고 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;사용-용도&quot;&gt;사용 용도&lt;/h2&gt;
&lt;p&gt;위에서 해시는 Key, Value구조로 데이터를 저장하는 해시 테이블이라고 설명을 했다. 이러한 해시는 언제 사용하면 좋을까?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-리스트를-사용할-수-없을-때&quot;&gt;🔖 &lt;code class=&quot;highlighter-rouge&quot;&gt;리스트를 사용할 수 없을 때&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;리스트는 숫자 인덱스를 이용하여 원소에 접근하는데 list[1]의 형식으로 접근은 가능하지만 list[‘a’]와 같은 형식으로는 접근이 불가능하다. 즉, 인덱스 값을 숫자가 아닌 문자열, Boolean 등과 같은 자료형을 사용할 때 해시(Python에서의 딕셔너리)를 사용하면 좋다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-빠른-접근탐색이-필요할-때&quot;&gt;🔖 &lt;code class=&quot;highlighter-rouge&quot;&gt;빠른 접근/탐색이 필요할 때&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;해시(Python에서의 딕셔너리) 함수의 시간복잡도는 대부분 O(1)이므로 아주 빠른 자료구조이므로 List보다 빠른 접근과 탑색이 필요할 때 사용하면 좋다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-집계가-필요할-때&quot;&gt;🔖 &lt;code class=&quot;highlighter-rouge&quot;&gt;집계가 필요할 때&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;원소의 개수를 세는 문제는 코딩 테스트에서 많이 출제되는 문제이다. 이때 해시와, Collections모듈의 Counter 클래스를 사용하면 아주 빠르게 문제를 풀 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;딕셔너리와-리스트의-시간-복잡도-차이&quot;&gt;딕셔너리와 리스트의 시간 복잡도 차이&lt;/h2&gt;
&lt;p&gt;위의 설명에서 딕셔너리의 시간 복잡도는 대부분 O(1)을 갖는다고 했다. 아래 표를 이용하여 리스트와 시간복잡도를 비교해 보자.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Operation&lt;/th&gt;
      &lt;th&gt;Dictionary&lt;/th&gt;
      &lt;th&gt;List&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Get Item&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Inser Item&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;O(1)~O(N)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Update Item&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Delete Item&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;O(1)~O(N)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Search Item&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;O(1)&lt;/td&gt;
      &lt;td&gt;O(N)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;List에 비해 Dictionary가 매우 빠른 시간복잡도를 갖는 것을 볼 수 있다. 즉, 원소를 넣거나 삭제, 찾는 일이 많을 때에는 딕셔너리를 사용하는 것이 좋다.&lt;br /&gt;
&lt;span style=&quot;color:red;&quot;&gt;❊ Python3.7 이상부터 딕셔너리는 원소가 들어온 순서를 보장하게 되었다. 반면, Python3.7미만은 순서를 보장하지 않는다고 한다.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dictionary-사용법&quot;&gt;Dictionary 사용법&lt;/h2&gt;
&lt;h3 id=&quot;-init&quot;&gt;🔖 &lt;code class=&quot;highlighter-rouge&quot;&gt;Init&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;{}를 사용하거나 dict함수 호출 시 빈 딕셔너리를 선언할 수 있다. Key-Value쌍을 가지는 Dictionary선언도 바로 가능하다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 딕셔너리 생성하기
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init_dict1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;init_dict2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init_dict1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# {}
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init_dict2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# {}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Key-Value쌍을 가지는 특정 dictionary 선언
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lagom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'조OO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'age'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'marital'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'height'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;183&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Lagom&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
{'name': '조OO', 'age': 32, 'marital': False, 'height': 183}
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# dictionary를 value로 가지는 dictionary 선언
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lagom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'조OO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'age'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'marital'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'height'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;183&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'Friend'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'MinWook'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'Jinho'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Lagom&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'''
{'name': '조OO',
 'age': 32,
 'marital': False,
 'height': 183,
 'Friend': {'Jinho', 'MinWook'}}
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-get&quot;&gt;🔖 &lt;code class=&quot;highlighter-rouge&quot;&gt;Get&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Dictionary에서 원소를 가져오는 2가지 방법 [], get메소드 가 존재한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;get메소드는 get(key, x)로 사용을 할 수 있으며, key가 존재하지 않을 때 x를 반환해준다.
```python
    &lt;h1 id=&quot;-기호로-원소-가져오기&quot;&gt;[] 기호로 원소 가져오기&lt;/h1&gt;
    &lt;p&gt;Lagom = {
 ‘name’ : ‘조OO’,
 ‘age’ : 32,
 ‘marital’ : False,
 ‘height’ : 183,
 ‘Friend’ : {
     ‘MinWook’,
     ‘Jinho’
 }
}
Lagom[‘name’]&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;’’’
‘조OO’
‘’’&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;```python
# get 메소드로 원소 가져오기
# 딕셔너리에 해당 key가 없는 경우 error를 발생하는 대신 특정 값을 가져오게 하기
Lagom = {
    'name' : '조OO',
    'age' : 32,
    'marital' : False,
    'height' : 183,
    'Friend' : {
        'MinWook',
        'Jinho'
    }
}

Lagom.get('weight', 80)

'''
80
'''
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-set&quot;&gt;🔖 &lt;code class=&quot;highlighter-rouge&quot;&gt;Set&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Dictionary에 값을 넣거나 수정할 때 []를 사용한다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 값 넣기
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lagom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'조OO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'age'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'marital'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'height'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;183&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'Friend'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'MinWook'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'Jinho'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Lagom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'weight'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Lagom&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;'''
{'name': '조OO',
 'age': 32,
 'marital': False,
 'height': 183,
 'Friend': {'Jinho', 'MinWook'},
 'weight': 80}
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 값 수정
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lagom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'조OO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'age'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'marital'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'height'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;183&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'Friend'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'MinWook'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'Jinho'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Lagom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'박OO'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Lagom&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;'''
{'name': '박OO',
 'age': 32,
 'marital': False,
 'height': 183,
 'Friend': {'Jinho', 'MinWook'}}
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-delete&quot;&gt;🔖 &lt;code class=&quot;highlighter-rouge&quot;&gt;Delete&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Dictionary에서 특정 key값을 지울때 아래와 같은 방법을 이용할 수 있다.&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;del dict_obj[key]&lt;br /&gt;
del 은 키워드로써, 만약 Dictionary에 key가 없다면 keyError가 발생한다.&lt;/li&gt;
  &lt;li&gt;pop(key, [default])&lt;br /&gt;
pop은 메소드로써, pop메소드는 key값에 해당하는 value를 리턴한다. key가 없다면 두번째 파라미터인 default를 리턴한다. 만약 default설정하지 않았을 경우 keyError가 발생한다.
```python
    &lt;h1 id=&quot;del-이용하기---키가-있는-경우&quot;&gt;del 이용하기 - 키가 있는 경우&lt;/h1&gt;
    &lt;p&gt;Lagom = {
 ‘name’ : ‘조OO’,
 ‘age’ : 32,
 ‘marital’ : False,
 ‘height’ : 183,
 ‘Friend’ : {
     ‘MinWook’,
     ‘Jinho’
 }
}
del Lagom[‘name’]&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Lagom&lt;/p&gt;

&lt;p&gt;’’’
{‘age’: 32, ‘marital’: False, ‘height’: 183, ‘Friend’: {‘Jinho’, ‘MinWook’}}
‘’’&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;```python
#  del 이용하기 - 키가 없는 경우 raise KeyError
Lagom = {
    'name' : '조OO',
    'age' : 32,
    'marital' : False,
    'height' : 183,
    'Friend' : {
        'MinWook',
        'Jinho'
    }
}
del Lagom['weight']

'''
KeyError                                  Traceback (most recent call last)
Cell In [14], line 11
      1 Lagom = {
      2     'name' : '조OO',
      3     'age' : 32,
   (...)
      9     }
     10 }
---&amp;gt; 11 del Lagom['weight']

KeyError: 'weight'
'''
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# pop 이용하기 - 키가 있는 경우 대응하는 value 리턴
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lagom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'조OO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'age'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'marital'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'height'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;183&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'Friend'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'MinWook'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'Jinho'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Lagom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;'''
32
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# pop 이용하기 - 키가 없는 경우 대응하는 default 리턴
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lagom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'조OO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'age'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'marital'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'height'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;183&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'Friend'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'MinWook'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'Jinho'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Lagom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'weight'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;'''
18
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-iterate&quot;&gt;🔖 &lt;code class=&quot;highlighter-rouge&quot;&gt;Iterate&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Dictionary를 for문을 이용하여 조회할 때 두가지 방법&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;key로 순회하기&lt;/li&gt;
  &lt;li&gt;key, value동시 순회하기(item() 사용)&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Lagom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'조OO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'age'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'marital'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'height'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;183&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'Friend'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'MinWook'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'Jinho'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lagom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;'''
name
age
marital
height
Friend
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Lagom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'조OO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'age'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'marital'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'height'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;183&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'Friend'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'MinWook'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'Jinho'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lagom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;'''
name 조OO
age 32
marital False
height 183
Friend {'Jinho', 'MinWook'}
'''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;그-외-dictionary-팁&quot;&gt;그 외 Dictionary 팁&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;특정 키 유무 확인
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'조OO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'age'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;key 또는 value만 뽑아내는 방법
    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'조OO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'age'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'조OO'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'age'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 24 Feb 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/study/2023/02/24/%ED%95%B4%EC%8B%9C(Hash).html</link>
        <guid isPermaLink="true">http://localhost:4000/study/2023/02/24/%ED%95%B4%EC%8B%9C(Hash).html</guid>
        
        <category>data_structure</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>[Algorithm] 선택 정렬 (Selection Sort)</title>
        <description>&lt;h1 id=&quot;선택-정렬-selection-sort&quot;&gt;선택 정렬 (Selection Sort)&lt;/h1&gt;
&lt;p&gt;정렬 알고리즘 중에서 가장 직관적이고 쉽게 구현이 가능한 선택 정렬(Selection Sort)에 대해 알아보려고 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;개념&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;개념&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;선택 정렬은 &lt;a href=&quot;https://github.com/laagom/Tech-Knowledge/blob/main/Algorithm/%EA%B1%B0%ED%92%88%20%EC%A0%95%EB%A0%AC(Bubble%20Sort).md&quot;&gt;거품 정렬&lt;/a&gt;과 많이 유사하다. 해당 순서에 원소를 넣을 위치는 이미 정해져 있고, 어떤 원소를 넣을지 선택하는 알고리즘이다. &lt;code class=&quot;highlighter-rouge&quot;&gt;거품정렬&lt;/code&gt;의 경우 앞에서 서로 인접한 두개의 요소를 비교하여 제일 큰 값부터 뒤로 보내는 알고리즘이었다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;선택 정렬&lt;/code&gt;은 앞에서 부터 제일 작은 값을 순차적으로 나열하는 방식의 알고리즘이다.&lt;/p&gt;

&lt;p&gt;이제 하나의 배열을 가지고 위에서 설명한 &lt;code class=&quot;highlighter-rouge&quot;&gt;선택 정렬&lt;/code&gt;이 어떻게 진행되는지 알아보자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;주어진 배열 중에 최소값을 찾는다.&lt;/li&gt;
  &lt;li&gt;그 값을 맨 앞에 위치한 값과 교체한다.&lt;/li&gt;
  &lt;li&gt;맨 처음 위치를 뺀 나머지 배열을 같은 방법으로 교체한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음과 같이 4명의 친구들의 키를 알고 있는데 순서대로 세우고 싶다.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;170cm, 180cm, 150cm, 160cm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위와 같이 키를 알고 있는 4명의 친구들 중 키가 제일 작은 &lt;code class=&quot;highlighter-rouge&quot;&gt;150cm&lt;/code&gt;인 친구를 맨 앞에 세운다.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;150cm (4명 중 제일 작음)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;키가 &lt;code class=&quot;highlighter-rouge&quot;&gt;150cm&lt;/code&gt;인 친구는 맨 앞에 세웠으니, 이제 나머지 세 친구를 비교하여 키가 두 번째로 작은 &lt;code class=&quot;highlighter-rouge&quot;&gt;160cm&lt;/code&gt;인 친구를 그 다음에 세운다.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;150cm, 160cm (150cm 빼고 남은 3명 중 제일 작음)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이제 키가 &lt;code class=&quot;highlighter-rouge&quot;&gt;70cm&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;180cm&lt;/code&gt;인 친구만 남았다. 둘 중 &lt;code class=&quot;highlighter-rouge&quot;&gt;170cm&lt;/code&gt;인 친구가 더 작기 때문에 그 다음에 세우고 &lt;code class=&quot;highlighter-rouge&quot;&gt;180cm&lt;/code&gt;인 친구를 마지막에 세운다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;즉, 크기 n의 배열이 주어졌을 때, index 0부터 n-1까지의 모든 index i에 대해, i번째 부터 n-1번째까지 값 중 가장 작은 값을 구해서 index i에 놓으면 정렬된 배열을 얻을 수가 있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;모든 index에 대해서 그 index에 위치시킬 값을 &quot;선택&quot;하기 때문에 이 정렬 알고리즘을 &quot;선택 정렬&quot; 또는 &quot;Selection Sort&quot;&lt;/code&gt;라고 부른다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;gif로-이해하는-selection-sort&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;GIF로 이해하는 Selection Sort&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/selection-sort-001.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;특징&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;특징&lt;/span&gt;&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;선택 정렬은 정렬된 값을 배열의 맨 앞부터 하나씩 채워나가게 된다. 따라서, 뒤에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;index로 갈수록 비교 범위가 하나씩 점점 줄어드는 특성&lt;/code&gt;을 가지고 있다. 이 특성은 최대 값을 뒤에서 부터 채워나가는 버블 정렬과 동일한 특성을 가진다.&lt;/li&gt;
  &lt;li&gt;입력 배열이 이미 정렬되어 있건 말건 관계없이 동일한 연산량을 가지고 있기 때문에 최적화 여지가 적어서 시간복잡도가 &lt;code class=&quot;highlighter-rouge&quot;&gt;O(N^2)&lt;/code&gt;으로 비효율적이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;복잡도&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;복잡도&lt;/span&gt;&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;선택 정렬은 별도의 추가 공간을 사용하지 않고 주어진 배열이 차지하고 있는 공간 내에서 값들의 위치만 바꾸기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;O(1)&lt;/code&gt;의 공간 복잡도를 가진다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;시간 복잡도는 우선 루프문을 통해 모든 인덱스에 접근해야 하기 때문에 기본적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;O(N)&lt;/code&gt;을 시간을 소모하며, 하나의 루프에서는 현재 인덱스의 값과 다른 인덱스의 값들과 비교하여 최소 값을 찾은 후 현재 인덱스에 있는 값과 서로 자리를 변경해야 하기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;O(N)&lt;/code&gt;의 시간이 필요하게 된다. 최종적으로 선택 정렬은 &lt;code class=&quot;highlighter-rouge&quot;&gt;O(N^2)&lt;/code&gt;의 시간  복잡도를 가지는 정렬 알고리즘이다.
&lt;br /&gt;&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 데이터의 개수가 n개라고 했을 때,
 첫 번째 회전에서의 비교횟수 : 1 ~ (n-1) =&amp;gt; n-1
 두 번째 회전에서의 비교횟수 : 2 ~ (n-1) =&amp;gt; n-2
 ...

 (n-1) + (n-2) + .... + 2 + 1 =&amp;gt; n(n-1)/2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;python-코드&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;Python 코드&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;거품 정렬과 마찬가지로 두 개의 반복문이 필요하다. 내부 반목문에서는 현재 index부터 마지막 index까지 최소값의 index를 찾아내고, 외부 반복문에서는 이 최소값의 index와 현재 index에 있는 값을 변경한다. 외부 반복문에서는 index &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;n-2&lt;/code&gt;(또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;n-1&lt;/code&gt;. 마지막 index에서는 남는 갓이 하나 밖에 없기 때문에 대소에 지장 없음)까지 진행, 내부 반복문에서 이미 정렬된 값들에서는 관심이 없기 때문에 index &lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;n-1&lt;/code&gt;까지 진행시킨다. 각 index에 대해서 최소값을 찾기 위해 대소 비교는 여러번 일어나나 상호 교대는 한번만 일어난다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;selection_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;min_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;min_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;
                
        &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;190&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;170&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;160&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selection_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;결론&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;버블 정렬과 유사하지만 조금 더 빠른 선택 정렬에 대해 정리해 보았다. 시간 측정을 해 보았지만 정말 미묘하게 더 빠른 타임을 가진다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;timeit&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;time_decorator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exec_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exec_func&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_decorator&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;selection_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;min_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;min_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;
                
        &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;select_arry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selection_sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select_arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 6.4999330788850784e-06
# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 02 Feb 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/study/2023/02/02/%EC%84%A0%ED%83%9D-%EC%A0%95%EB%A0%AC(Selection-Sort).html</link>
        <guid isPermaLink="true">http://localhost:4000/study/2023/02/02/%EC%84%A0%ED%83%9D-%EC%A0%95%EB%A0%AC(Selection-Sort).html</guid>
        
        <category>algorithm</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>[Computer Science] 중앙처리장치(CPU) 작동 원리?</title>
        <description>&lt;h1 id=&quot;중앙처리장치cpu란&quot;&gt;중앙처리장치(CPU)란?&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;중앙처리장치(CPU)&lt;/code&gt;는 명령어의 &lt;code class=&quot;highlighter-rouge&quot;&gt;해석&lt;/code&gt;과 자료의 &lt;code class=&quot;highlighter-rouge&quot;&gt;연산&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;비교&lt;/code&gt;등의 처리를 제어하는 컴퓨터 시스템의 핵심장치이다. 다양한 입력 장치로부터 정보를 입력받아 처리한 후, 그 결과를 출력장치로 보내는 일련의 과정을 &lt;code class=&quot;highlighter-rouge&quot;&gt;제어&lt;/code&gt;하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;조정&lt;/code&gt;하는 일을 수행한다. CUP는 사람의 두뇌와 같이 컴퓨터의 모든 시스템을 제어, 처리하는 가장 핵심적인 장치라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cpu-구성요소&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;CPU 구성요소&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;span&gt; &lt;img src=&quot;/assets/resources/cpu-architecture-001.png&quot; alt=&quot;Alt text&quot; /&gt; &lt;/span&gt;
출처: &lt;a href=&quot;https://mk28.tistory.com/15&quot;&gt;https://mk28.tistory.com/15&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;CPU는 크게 &lt;code class=&quot;highlighter-rouge&quot;&gt;제어장치&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;연산장치(ALU)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;레지스터&lt;/code&gt;와 각 구성 요소를 연결하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;내부 버스&lt;/code&gt;로 구성되어 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-연산-장치&quot;&gt;🔖 연산 장치&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;명령어를 실행하기 위한 마이크로연산(산술연산과 논리연산)을 수행&lt;/li&gt;
  &lt;li&gt;연산에 필요한 데이터를 레지스터에서 가져오고 산술, 논리, 관계, 이동 등 다양한 연산을 수행&lt;/li&gt;
  &lt;li&gt;연산 결과를 다시 레지스터로 보냄&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-제어-장치&quot;&gt;🔖 제어 장치&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;명령어를 순서대로 실행할 수 있도록 제어하는 장치&lt;/li&gt;
  &lt;li&gt;주기억장치에서 프로그램 명령어를 꺼내 &lt;code class=&quot;highlighter-rouge&quot;&gt;해독&lt;/code&gt;하고, 그 결과에 따라 명령어 실행에 필요한 &lt;code class=&quot;highlighter-rouge&quot;&gt;제어 신호&lt;/code&gt;를 기억장치, 연산장치, 입출력장치로 보냄&lt;/li&gt;
  &lt;li&gt;또한 이들 장치가 보낸 신호를 받아 다음에 수행할 동작을 결정&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-레지스터&quot;&gt;🔖 레지스터&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;CPU(중앙 처리 장치)내에 있는 소규모의 고속 기억장치&lt;/li&gt;
  &lt;li&gt;명령어 주소, 코드, 연산에 필요한 데이터 련산 결과 등을 임시로 저장&lt;/li&gt;
  &lt;li&gt;용도에 따라 범용 레지스터와 특수 목적 레지스터로 구분&lt;/li&gt;
  &lt;li&gt;레지스터는 메모리 계층의 &lt;code class=&quot;highlighter-rouge&quot;&gt;최상위&lt;/code&gt;에 위치하며 &lt;code class=&quot;highlighter-rouge&quot;&gt;가장 빠른 속도&lt;/code&gt;로 접근 가능한 메모리이다.&lt;/li&gt;
  &lt;li&gt;중앙처리장치 종류에 따라 사용할 수 있는 레지스터 개수와 크기가 다름
    &lt;ul&gt;
      &lt;li&gt;범용 레지스터 : 연산에 필요한 데이터나 연산 결과를 임시로 저장&lt;/li&gt;
      &lt;li&gt;특수목적 레지스터 : 특별한 용도로 사용하는 레지스터&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-특수-목적-레지스터의-종류&quot;&gt;🔖 특수 목적 레지스터의 종류&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;MAR (메모리 주소 레지스터) : &lt;code class=&quot;highlighter-rouge&quot;&gt;읽기&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;쓰기&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;연산&lt;/code&gt;을 수행할 주기억장치 주소를 저장&lt;/li&gt;
  &lt;li&gt;PC (프로그램 카운터) : 다음에 실행될 &lt;code class=&quot;highlighter-rouge&quot;&gt;명령어의 주소&lt;/code&gt;를 저장&lt;/li&gt;
  &lt;li&gt;SP (스택 포인터) : &lt;code class=&quot;highlighter-rouge&quot;&gt;스택&lt;/code&gt;의 최상위 주소를 저장&lt;/li&gt;
  &lt;li&gt;IX (인덱스 레지스터) : 인덱스 주소 지정 방식에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;인덱스&lt;/code&gt;를 저장&lt;/li&gt;
  &lt;li&gt;IR (명령어 레지스터) : 명령어를 호출해서 해독하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;현재 명령어&lt;/code&gt;를 임시로 저장&lt;/li&gt;
  &lt;li&gt;MBR (메모리 버퍼 레지스터) : &lt;code class=&quot;highlighter-rouge&quot;&gt;주기억장치의 내용&lt;/code&gt;을 임시로 저장하는 역할&lt;/li&gt;
  &lt;li&gt;AC (누산기) : 산술 논리 장치의 &lt;code class=&quot;highlighter-rouge&quot;&gt;연산 결과&lt;/code&gt;를 임시로 저장&lt;/li&gt;
  &lt;li&gt;PSR (프로그램 상태 레지스터) : &lt;code class=&quot;highlighter-rouge&quot;&gt;CPU의 현재 상태 정보&lt;/code&gt;를 저장&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cpu-연산동작-과정&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;CPU 연산&amp;amp;동작 과정&lt;/span&gt;&lt;/h2&gt;

&lt;h3 id=&quot;-연산&quot;&gt;🔖 연산&lt;/h3&gt;

&lt;p&gt;CPU의 연산 순서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Fetch&lt;/code&gt;-&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Decode&lt;/code&gt;-&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Execute&lt;/code&gt;-&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Writeback&lt;/code&gt;으로 이루어지며 각 과정의 설명은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Fetch(&lt;code class=&quot;highlighter-rouge&quot;&gt;인출&lt;/code&gt;): 메모리상의 프로그램 카운터(PC)가 가리키는 명령어를 CPU가 가르키는 명령어를 CPU로 인출하여 적재&lt;/li&gt;
  &lt;li&gt;Decode(&lt;code class=&quot;highlighter-rouge&quot;&gt;해석&lt;/code&gt;): 명령어의 해석. 이 단계에서 명령어의 종류와 타겟 등을 판단한다.&lt;/li&gt;
  &lt;li&gt;Execute(&lt;code class=&quot;highlighter-rouge&quot;&gt;실행&lt;/code&gt;): 해석된 명령어에 따라 데이터에 대한 연산을 수행한다.&lt;/li&gt;
  &lt;li&gt;Writeback(&lt;code class=&quot;highlighter-rouge&quot;&gt;쓰기&lt;/code&gt;): 명령어대로 처리 완료된 데이터를 메모리에 기록한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-동작-과정&quot;&gt;🔖 동작 과정&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/assets/resources/cpu-process-001.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(1) 보조기억장치에서 저장된 프로그램을 읽거나, 입력장치에서 입력받은 데이터를 주기억장치에서 읽는다.&lt;br /&gt;
(2) 주기억장치에서 읽어온 데이터를 중앙처리장치(CPU)가 읽고 처리한 후 다시 주기억장치로 보낸 후 저장한다.&lt;br /&gt;
(3) 주기억장치는 연산된 데이터를 출력장치에 보내거나 보조기억장치에 저장한다.&lt;br /&gt;
(4) 제어장치는 (1)-(3)과정에서 명령어가 순서대로 잘 실행되도록 제어하는 역할을 수행.&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cpu의-명령어&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;CPU의 명령어&lt;/span&gt;&lt;/h2&gt;

&lt;h3 id=&quot;-명령어-세트&quot;&gt;🔖 명령어 세트&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;명령어 세트는 CPU가 실행할 명령어의 집합이다.&lt;/li&gt;
  &lt;li&gt;명령어 세트는 실행할 연산을 나타내는 &lt;code class=&quot;highlighter-rouge&quot;&gt;연산 코드(Operation Code)&lt;/code&gt;와 연산에 필요한 데이터나 데이터의 저장 위치를 나타내는 &lt;code class=&quot;highlighter-rouge&quot;&gt;피연산자(Operand)&lt;/code&gt;로 구성된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-연산-코드-operation-code&quot;&gt;🔖 연산 코드 (Operation Code)&lt;/h3&gt;

&lt;p&gt;연산 코드는 실행하는 연산의 종류에 따라 다음과 같이 네 가지 기능으로 나뉜다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;연산 기능 : 사칙연산, 이동(shift), 보수 등의 산술연산과 논리곱, 논리합, 부정 등의 논리연산을 수행한다.&lt;/li&gt;
  &lt;li&gt;제어 기능 : 조건 분기와 무조건 분기 등을 사용하여 명령어의 실행 순서를 제어한다.&lt;/li&gt;
  &lt;li&gt;데이터 전달 기능 : 레지스터와 레지스터 사이, 레지스터와 주기억장치 사이에서 데이터를 전달한다.&lt;/li&gt;
  &lt;li&gt;입출력 기능 : 프로그램과 데이터를 주기억장치에 전달하고, 연산 결과는 출력장치에 전달한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-피연산자-operand&quot;&gt;🔖 피연산자 (Operand)&lt;/h3&gt;

&lt;p&gt;피연산자에는 주소, 숫자/문자, 논리 데이터 등을 저장할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;주소 : 기억장치 혹은 레지스터의 주소가 저장된다.&lt;/li&gt;
  &lt;li&gt;숫자/문자 : 숫자는 정수, 고정 소수점 수, 부동 소수점 수 및 각각의 코드로 저장되고 문자는 아스키코드로 저장된다.&lt;/li&gt;
  &lt;li&gt;논리 데이터 : 참 또는 거짓을 표현할 때 사용하며 비트나 플래그로 저장된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;명령어-사이클&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;명령어 사이클&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;CPU에서는 프로그램을 실행하기 위해 주기억장치에서 명령어를 순차적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;인출&lt;/code&gt;하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;해독&lt;/code&gt;하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;실행&lt;/code&gt;하는 과정을 반복하는데, CPU가 &lt;code class=&quot;highlighter-rouge&quot;&gt;주기억장치에서 한 번에 하나의 명령어를 인출하여 실행하는데 필요한 일련의 활동&lt;/code&gt;을 &lt;code class=&quot;highlighter-rouge&quot;&gt;명령어 사이클 (Instruction Cycle)&lt;/code&gt;이라고 한다.&lt;/p&gt;

&lt;p&gt;명령어 사이클은 &lt;code class=&quot;highlighter-rouge&quot;&gt;인출&lt;/code&gt; 사이클, &lt;code class=&quot;highlighter-rouge&quot;&gt;실행&lt;/code&gt; 사이클, &lt;code class=&quot;highlighter-rouge&quot;&gt;간접&lt;/code&gt; 사이클, &lt;code class=&quot;highlighter-rouge&quot;&gt;인터럽트&lt;/code&gt; 사이클로 세분화 시킬 수 있는데, &lt;code class=&quot;highlighter-rouge&quot;&gt;인출 사이클과 실행 사이클은 항상 수행&lt;/code&gt;되지만 / &lt;code class=&quot;highlighter-rouge&quot;&gt;간접 사이클과 인터럽트 사이클은 주소 지정방식이 필요할 때나 인터럽트 요구가 있을 때만&lt;/code&gt; 수행된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-인출사이클과-특수-목적-레지스터의-동작-과정&quot;&gt;🔖 인출사이클과 특수 목적 레지스터의 동작 과정&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/sycle-process-001.jpeg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;프로그램 카운터(PC)에 저장된 주소를 메모리 주소 레지스터(MAR)로 전달 한다.&lt;/li&gt;
  &lt;li&gt;메모리 주소 레지스터(MAR)에 저장된 내용을 토대로 주기억장치의 해당 주소에서 명령어를 인출한다.&lt;/li&gt;
  &lt;li&gt;인출한 명령어를 메모리 버퍼 레지스터(MBR)에 저장한다.&lt;/li&gt;
  &lt;li&gt;다음 명령어를 인출하기 위해 프로그램 카운터 (PC)의 값을 증가 시킨다.&lt;/li&gt;
  &lt;li&gt;메모리 버퍼 레지스터(MBR)에 저장된 내용을 명령어 레지스터(IR)에 전달한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 과정을 다음과 같이 표현하기도 한다.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;T0 : MAR &amp;lt;- PC
T1 : MBR &amp;lt;- M[MAR], PC &amp;lt;- PC + 1
T2 : IR &amp;lt;- MBR
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-실행-사이클과-특수-목적-레지스터의-동작-과정&quot;&gt;🔖 실행 사이클과 특수 목적 레지스터의 동작 과정&lt;/h3&gt;

&lt;p&gt;다음은 인출 사이클로부터 명령어를 인출한 이후 명령어를 실행하는 과정인 실행 사이클의 과정이다.
그 중에서도 더하기(ADD) 연산으로 과정을 살펴보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/access-process-001.jpeg&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;명령어 레지스터(IR)의 내용을 메모리 주소 레지스터(MAR)로 전달한다.&lt;/li&gt;
  &lt;li&gt;메모리에 저장된 데이터 값을 메모리 버퍼 레지스터(MBR)에 저장한다.&lt;/li&gt;
  &lt;li&gt;누산기(AC)에 저장된 값에 ADD연산을 실행한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;실행 사이클도 인출 사이클과 마찬가지로 다음과 같이 표현 할 수 있다.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ADD addr 명령어 연산

T0 : MAR &amp;lt;- IR(Addr)
T1 : MBR &amp;lt;- M[MAR]
T2 : AC &amp;lt;- AC + MBR
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;실행-사이클에서는-프로그램-카운터를-증가시키지-않는-이유&quot;&gt;실행 사이클에서는 프로그램 카운터를 증가시키지 않는 이유&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;인출 사이클과 다르게 실행 사이클에서는 프로그램 카운터(PC)를 증가시키지 않는데, &lt;code class=&quot;highlighter-rouge&quot;&gt;이미 인출이 진행 되고 명령어 실행만 하면 되는 상황&lt;/code&gt;이기 때문에 프로그램 카운터를 증가시킬 필요가 없다.
즉, 이미 인출이 되어 명령어 레지스터(IR)에 메모리 버퍼 레지스터(MBR)의 값이 저장된 상태라는 의미이다.&lt;/p&gt;
</description>
        <pubDate>Tue, 31 Jan 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/study/2023/01/31/%EC%A4%91%EC%95%99%EC%B2%98%EB%A6%AC%EC%9E%A5%EC%B9%98(CPU)-%EC%9E%91%EB%8F%99-%EC%9B%90%EB%A6%AC.html</link>
        <guid isPermaLink="true">http://localhost:4000/study/2023/01/31/%EC%A4%91%EC%95%99%EC%B2%98%EB%A6%AC%EC%9E%A5%EC%B9%98(CPU)-%EC%9E%91%EB%8F%99-%EC%9B%90%EB%A6%AC.html</guid>
        
        <category>computer_science</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>[Computer Science] 컴퓨터란?</title>
        <description>&lt;h1 id=&quot;컴퓨터란&quot;&gt;컴퓨터란?&lt;/h1&gt;
&lt;p&gt;compute라는 어원을 가지며, &lt;code class=&quot;highlighter-rouge&quot;&gt;계산&lt;/code&gt;하는 기계라는 의미를 가지고 있다. 여기서 &lt;code class=&quot;highlighter-rouge&quot;&gt;계산&lt;/code&gt;이라는 것은 우리가 생각하는 산수가 아닌 좀더 포괄적인 개념이다. 그렇다면 계산하는 기계인 컴퓨터가 가지는 구성에 대해 알아보자. 컴퓨터 시스템은 크게 &lt;code class=&quot;highlighter-rouge&quot;&gt;하드웨어&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;소프트웨어&lt;/code&gt;로 나누어진다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;하드웨어: 컴퓨터를 구성하는 기계적 장치&lt;/li&gt;
  &lt;li&gt;소프트웨어: 하드웨어의 동작을 지시하고 제어하는 명령어 집합&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;하드웨어&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;하드웨어&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;하드웨어는 마우스, 키보드 등 실제로 존재하는 컴퓨터를 구성하는 장치를 말한다.
&lt;img src=&quot;/assets/resources/hardware-architecture-001.jpeg&quot; alt=&quot;Alt text&quot; /&gt;
창고: &lt;a href=&quot;http://jangun.com/study/ComputerScienceIntroduction.html&quot;&gt;http://jangun.com/study/ComputerScienceIntroduction.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;중앙처리장치(CPU)&lt;/li&gt;
  &lt;li&gt;기억장치: RAM, HDD&lt;/li&gt;
  &lt;li&gt;입출력장치: 마우스, 프린터, 모니터 등&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;실재하는 컴퓨터는 하드웨어는 &lt;code class=&quot;highlighter-rouge&quot;&gt;중앙처리장치(CPU)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;기억장치&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;입출력장치&lt;/code&gt; 로 구성되어 있다. 이들은 시스템 버스로 연결이 되어 있으며, 시스템 버스는 데이터와 명령 제어 신호를 각 장치로 실어나르는 역할을 한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-cpu이란&quot;&gt;🔖 CPU이란?&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;컴퓨터에서 `계산`을 담당하는 두뇌라고 생각하면 된다.  주기억장치에서 프로그램 명령어와 데이터를 읽어와 처리하고 명령어의 수행 순서를 제어한다. 중앙처리장치(CPU)는 비교와 연산을 담당하는 `산술논리연산장치(ALU)`와 명령어의 해석과 실행을 담당하는 `제어장치`, 속도가 빠른 데이터 기억장소인 `레지스터`로 구성되어 있다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;계산&lt;/code&gt;을 담당하는 만큼 &lt;code class=&quot;highlighter-rouge&quot;&gt;처리속도가 그만큼 빠르다.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-ram이란&quot;&gt;🔖 RAM이란?&lt;/h3&gt;
&lt;p&gt;우리가 수학문제를&lt;code class=&quot;highlighter-rouge&quot;&gt;노트&lt;/code&gt;하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;연필&lt;/code&gt;을 이용하여 풀듯, CPU가 하는 계산을 &lt;code class=&quot;highlighter-rouge&quot;&gt;노트&lt;/code&gt;와&lt;code class=&quot;highlighter-rouge&quot;&gt;연필&lt;/code&gt;을 이용하여 도와주는 역할을 &lt;code class=&quot;highlighter-rouge&quot;&gt;RAM&lt;/code&gt;이라고 생각하면 된다. 내 두뇌만을 이용해서 문제를 풀 수 있지만 노트와 연필을 이용한 보조장치를 이용하면 더 손쉬운 문제풀이가 가능하기 때문에 RAM이라는 하드웨어가 존재하는 것이다.&lt;/p&gt;

&lt;h3 id=&quot;-보조장치란&quot;&gt;🔖 보조장치란?&lt;/h3&gt;
&lt;p&gt;좁은 의미의 컴퓨터는 &lt;code class=&quot;highlighter-rouge&quot;&gt;CPU&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;RMA&lt;/code&gt;을 합친거라고 생각하면 나머지는 보조장치라고 할 수 있다.(입출력장치, 보조 기억장치)&lt;/p&gt;

&lt;h3 id=&quot;-보조-기억-장치hdd-sdd란&quot;&gt;🔖 보조 기억 장치(HDD, SDD)란?&lt;/h3&gt;
&lt;p&gt;RAM도 사실상 용량이 그렇게 크지 않기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;보조 기억 장치&lt;/code&gt;를 이용한다. 우리가 자주 접하는 컴퓨터 용량이나 외장 하드, SSD가 이에 포함된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;-시스템-버스&quot;&gt;🔖 시스템 버스&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;하드웨어 구성 요소를 물리적으로 연결하는 선을 의미 각 구성요소가 다른 구성요소로 데이터를 보낼 수 있도록 통로가 되어준다. 용도에 따라 `데이터 버스`, `주소 버스`, `제어 버스`로 나누어 진다.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;데이터 버스 : 중앙처리장치와 기타 장치 사이에서 데이터를 전달하는 통로&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;기억장치와 입출력장치의 명령어와 데이터를 중앙처리장치로 보내거나 중앙처리장치의 연산 결과를 기억장치와 입출력장치로 보내는 &lt;code class=&quot;highlighter-rouge&quot;&gt;양방향&lt;/code&gt;버스&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;주소 버스 : 데이터를 정확히 실어나르기 위해서는 기억 장치 &lt;code class=&quot;highlighter-rouge&quot;&gt;주소&lt;/code&gt;를 정해주어야 함.&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;주소 버스는 중앙처리장치가 주기억 장치나 입출력장치로 기억장치 주소를 전달하는 통로이기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;단방향&lt;/code&gt;버스임&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;제어 버스 : 주소 버스와 데이터 버스는 모든 장치에 공유되기 때문에 이를 제어할 수단이 필요&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;제어 버스는 중앙처리 장치가 기억장치나 입출력장치에 제어 신호를 전달하는 통로임&lt;/li&gt;
    &lt;li&gt;제어 신호 종류 : 기억장치 읽기 및 쓰기, 버스 요청 및 승인, 인터럽트 요청 및 승인, 클락, 리셋 등&lt;/li&gt;
    &lt;li&gt;제어 버스는 읽기 동작과 쓰기 동작을 모두 수행하기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;양방향&lt;/code&gt;버스임&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;소프트웨어&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;소프트웨어&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;소프트웨어는 눈으로는 볼 수 있지만 손으로는 만질 수 없는 것들을 의민한다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;시스템 소프트웨어: 운영체제, 컴파일러&lt;/li&gt;
  &lt;li&gt;응용 소프트웨어: 워드프로세서, 스프레드시트&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 25 Jan 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/study/2023/01/25/%EC%BB%B4%ED%93%A8%ED%84%B0%EB%9E%80.html</link>
        <guid isPermaLink="true">http://localhost:4000/study/2023/01/25/%EC%BB%B4%ED%93%A8%ED%84%B0%EB%9E%80.html</guid>
        
        <category>computer_science</category>
        
        
        <category>study</category>
        
      </item>
    
      <item>
        <title>[Algorithm] 거품 정렬 (Bubble Sort)</title>
        <description>&lt;h1 id=&quot;거품-정렬-bubble-sort&quot;&gt;거품 정렬 (Bubble Sort)&lt;/h1&gt;

&lt;h2 id=&quot;개념&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;개념&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;거품 정렬은 뒤에서 부터 앞으로 정렬을 해나가는 구조를 가지고 있다. (오름차순)즉, 배열 내의 인접한 값들을 앞뒤로 비교하며 자리를 바꾸는데 맨 뒷자리로 제일 큰 값을 보내는 작업을 수행한다. 이렇게 하나씩 큰 값을 뒤쪽으로 보내 채워 나가며 앞으로 정렬해 왔을 때 작은 수 부터 큰 수 까지 오름차순으로 정렬된 배열을 가지는 정렬이다. 큰 값을 계속해서 뒤로 보내는 모습이 마치 방울이 이동하는 것과 같이 보여서 거품 정렬이라는 이름이 붙어졌다.&lt;/p&gt;

&lt;p&gt;이제 하나의 배열을 가지고 위에서 설명한 거품정렬이 어떻게 진행되는지 알아보자. 다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;부터 &lt;code class=&quot;highlighter-rouge&quot;&gt;5&lt;/code&gt;까지 총 5개의 숫자가 들어있는 배열이 존재한다.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[3, 2, 4, 5, 1]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;먼저 3, 2를 비교, 3이 2보다 크기 때문에 자리를 바꾸며 큰 값을 뒤로 보내준다.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[3, 2, 4, 5, 1]

3 &amp;gt; 2 =&amp;gt; switch 
[2, 3, 4, 5, 1]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그 다음 3, 4를 비교, 3은 4보다 크지 않기 때문에 그대로 유지한다.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[2, 3, 4, 5, 1]

3, 4 =&amp;gt; keep     
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그 다음 4, 5를 비교, 4는 5보다 크지 않기 때문에 그대로 유지한다.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[2, 3, 4, 5, 1]

4, 5 =&amp;gt; keep
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그 다음 5, 1를 비교, 5는 1보다 크기 때문에 자리를 바꾸며 큰 값을 뒤로 보내준다.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[2, 3, 4, 5, 1]

5 &amp;gt; 1 =&amp;gt; switch
[2, 3, 4, 1, 5]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 값을 처음부터 비교해가며 앞의 값이 뒤의 값보다 큰 경우 자리를 바꿔주면 제일 큰 값을 맨 뒤로 보내줄 수 있다. 위의 과정은 제일 큰 값을 맨 뒤로 보내주는 작업이며 그다음은 두번째 큰 값을 제일 큰 값 앞으로 보내주는 과정을 진행해 주면 된다.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;origin: [3, 2, 4, 5, 1]
-----------------------
loop 1: [2, 3, 4, 1, 5]
                   *
loop 2: [2, 3, 1, 4, 5]
                *  *
loop 3: [2, 1, 3, 4, 5]
             *  *  *
loop 4: [1, 2, 3, 4, 5]
          *  *  *  *
loop 5: [1, 2, 3, 4, 5]
       *  *  *  *  *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;gif로-이해하는-bubble-sort&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;GIF로 이해하는 Bubble Sort&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/resources/bubble-sort-001.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;특징&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;특징&lt;/span&gt;&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;거품 정렬은 점점 큰 값들이 뒤에서 앞으로 쌓여 이동하기 때문에 정렬의 범위가 하나씩 줄어든다. 다음 loop에서 제일 뒤로 간 큰 값은 비교를 할 필요가 없기 때문이다.&lt;/li&gt;
  &lt;li&gt;제일 작은 값을 맨 앞으로 이동시키는 선택 정렬과 정렬 방향이 반대이다.&lt;/li&gt;
  &lt;li&gt;선택정렬에 비해 자리 변경이 더 많이 일어난다.&lt;/li&gt;
  &lt;li&gt;위의 loop 4, loop 5를 보면 필요없는 과정이 있어 최적화가 필요하다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;복잡도&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;복잡도&lt;/span&gt;&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;거품 정렬은 별도의 추가 공간을 사용하지 않고 배열안에서 값들의 위치가 변경되기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;0(1)&lt;/code&gt;의 공간 복잡도를 가진다.&lt;/li&gt;
  &lt;li&gt;시간 복잡도는 반복문을 통해 맨 뒤에서 맨 앞까지 모든 인덱스에 접근하기 때문에 기본적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;0(N)&lt;/code&gt; 시간을 소모하며, 하나의 루프에서는 인접한 값들의 대소 비교 및 자리 교대를 위해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;0(N)&lt;/code&gt; 시간을 필요하게 된다. 따라서 거품 정렬은 총 &lt;code class=&quot;highlighter-rouge&quot;&gt;0(N^2)&lt;/code&gt;의 시간 복잡도를 가진다.&lt;/li&gt;
  &lt;li&gt;정렬이 이미 완료된 배열인 경우에는 0(N) 시간 복잡도를 가진다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;python-코드&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;Python 코드&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;선택 정렬과 마찬가지로 두 개의 반복문이 필요하다. 내부 반복문에서는 첫번째 값부터 이전 패스에서 뒤로 보내놓은 값이 있는 위치 전까지 앞뒤 값을 계속해서 비교해나가면서 앞의 값이 뒤의 값보다 클 경우 자리 변경(switch)을 한다. 외부 반복문에서는 뒤에서 부터 앞으로 정렬 범위를 &lt;code class=&quot;highlighter-rouge&quot;&gt;n-1&lt;/code&gt;부터 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; 까지 줄여나간다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bubbleSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bubble_arry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bubbleSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bubble_arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;최적화&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;최적화&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;이전 loop에서 앞뒤 자리 변경(switch)이 한 번도 일어나지 않았다면 정렬도지 않는 값이 하나도 없었다고 할 수 있다. 따라서 이러한 경우 loop를 수행하지 않아도 된다.&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;origin: [1, 2, 3, 5, 4]
------------------------
 loop 1: [1, 2, 3, 4, 5] =&amp;gt; switch 있음
                      *
 loop 2: [1, 2, 3, 4, 5] =&amp;gt; switch 없음
                   *  *
=&amp;gt; 이전 패스에서 loop이 한 번도 없었으니 종료
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;timeit&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;time_decorator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exec_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default_timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exec_func&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time_decorator&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bubbleSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;bubble_arry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bubbleSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bubble_arry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;결론&quot;&gt;&lt;span style=&quot;color:hsl(350, 100%, 66%);&quot;&gt;결론&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;최적화 하여 코드를 변경하고 시간을 측정해 봤을때 실행 속도가 많이 빨라졌다는 느낌은 없었다. 하지만 최적화 전보다 빈번하게 더 시간이 단축되어 실행되는 경우가 발생한 것을 보니 코드 최적화가 조금은 된 것으로 보인다.&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Jan 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/study/2023/01/25/%EA%B1%B0%ED%92%88-%EC%A0%95%EB%A0%AC(Bubble-Sort).html</link>
        <guid isPermaLink="true">http://localhost:4000/study/2023/01/25/%EA%B1%B0%ED%92%88-%EC%A0%95%EB%A0%AC(Bubble-Sort).html</guid>
        
        <category>algorithm</category>
        
        
        <category>study</category>
        
      </item>
    
  </channel>
</rss>
